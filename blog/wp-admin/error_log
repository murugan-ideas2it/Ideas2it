[04-Nov-2016 10:00:43 UTC] Making request GET https://api.medium.com/v1/me: 
[04-Nov-2016 10:00:44 UTC] Received response (200 - application/json; charset=utf-8): {"data":{"id":"1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b","username":"vivi_28","name":"vivekanandan","url":"https://medium.com/@vivi_28","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/1*LLwGUhsHsm4a78AXThq_Yg.jpeg"}}
[04-Nov-2016 10:00:44 UTC] Making request GET https://api.medium.com/v1/users/1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b/publications: 
[04-Nov-2016 10:00:44 UTC] Received response (200 - application/json; charset=utf-8): {"data":[]}
[04-Nov-2016 13:10:41 UTC] Making request GET https://api.medium.com/v1/users/1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b/publications: 
[04-Nov-2016 13:10:41 UTC] Received response (200 - application/json; charset=utf-8): {"data":[{"id":"fd166ea10e5b","name":"Ideas2IT","description":"Craftsmen & engineers for startups and scale-ups - We are a crack team of startup nerds, valley veterans, CTOs, ex-Googlers, big co. Visit us <a href=”http://www.ideas2it.com”>http://www.ideas2it.com</a>","url":"https://medium.com/ideas2it","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/1*D-io1sLQIM_-lQ1KbOk-ZQ.png"}]}
[04-Nov-2016 13:10:41 UTC] Making request GET https://api.medium.com/v1/publications/fd166ea10e5b/contributors: 
[04-Nov-2016 13:10:41 UTC] Received response (200 - application/json; charset=utf-8): {"data":[{"publicationId":"fd166ea10e5b","userId":"1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b","role":"editor"}]}
[04-Nov-2016 13:12:27 UTC] Making request GET https://api.medium.com/v1/me: 
[04-Nov-2016 13:12:27 UTC] Received response (200 - application/json; charset=utf-8): {"data":{"id":"1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b","username":"Ideas2IT","name":"Ideas2IT","url":"https://medium.com/@Ideas2IT","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/1*D-io1sLQIM_-lQ1KbOk-ZQ.png"}}
[04-Nov-2016 13:12:27 UTC] Making request GET https://api.medium.com/v1/users/1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b/publications: 
[04-Nov-2016 13:12:27 UTC] Received response (200 - application/json; charset=utf-8): {"data":[{"id":"fd166ea10e5b","name":"Ideas2IT","description":"Craftsmen & engineers for startups and scale-ups - We are a crack team of startup nerds, valley veterans, CTOs, ex-Googlers, big co. Visit us <a href=”http://www.ideas2it.com”>http://www.ideas2it.com</a>","url":"https://medium.com/ideas2it","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/1*D-io1sLQIM_-lQ1KbOk-ZQ.png"}]}
[04-Nov-2016 13:12:27 UTC] Making request GET https://api.medium.com/v1/publications/fd166ea10e5b/contributors: 
[04-Nov-2016 13:12:28 UTC] Received response (200 - application/json; charset=utf-8): {"data":[{"publicationId":"fd166ea10e5b","userId":"1fb3aea6a4dce03ce8af2ece052113e296bde2886c150532234e7bb71d3894f6b","role":"editor"}]}
[17-Nov-2016 07:08:03 UTC] Making request GET https://api.medium.com/v1/me: 
[17-Nov-2016 07:08:03 UTC] Received response (200 - application/json; charset=utf-8): {"data":{"id":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","username":"murali_58946","name":"Murali Vivekanandan","url":"https://medium.com/@murali_58946","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/1*dmbNkD5D-u45r44go_cf0g.png"}}
[17-Nov-2016 07:08:03 UTC] Making request GET https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/publications: 
[17-Nov-2016 07:08:03 UTC] Received response (200 - application/json; charset=utf-8): {"data":[]}
[17-Nov-2016 07:08:33 UTC] Making request GET https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/publications: 
[17-Nov-2016 07:08:33 UTC] Received response (200 - application/json; charset=utf-8): {"data":[]}
[17-Nov-2016 07:13:41 UTC] Making request GET https://api.medium.com/v1/me: 
[17-Nov-2016 07:13:41 UTC] Received response (200 - application/json; charset=utf-8): {"data":{"id":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","username":"murali_58946","name":"Murali Vivekanandan","url":"https://medium.com/@murali_58946","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/1*dmbNkD5D-u45r44go_cf0g.png"}}
[17-Nov-2016 07:13:41 UTC] Making request GET https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/publications: 
[17-Nov-2016 07:13:41 UTC] Received response (200 - application/json; charset=utf-8): {"data":[]}
[17-Nov-2016 07:17:04 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"Microservices\u200a\u2014\u200aEdge Server\u00a0Pattern","content":"<h1>Microservices\u200a\u2014\u200aEdge Server\u00a0Pattern<\/h1>\n<p class=\"graf graf--h3\">When we started building out Microservices, we designed each Microservice around bounded contexts and designed the REST APIs to be around resources. And exposed them \"as is\" to clients. We quickly realized this is a bad idea.<\/p>\n<p class=\"graf graf--p\">Because what the front end or clients need is different from back-end design considerations:<\/p>\n<p class=\"graf graf--p\" style=\"padding-left: 30px\">- Front end or client\u2019s perspective is around a page or a use case. They couldn't care less about bounded context and cleanly defined resources.<\/p>\n<p class=\"graf graf--p\" style=\"padding-left: 30px\">- They prefer to get all data required for a view in one shot. Usually, this will be a combination of multiple resources. For ex, a Product page in e-commerce site will require information from different resources like product, recommendation etc. Making a call for each leads to chattiness and impacts performance.<\/p>\n<p class=\"graf graf--p\" style=\"padding-left: 30px\">- Based on the front end, what attributes they require about a particular resource will also differ. For instance, if you are rendering a Product page, you might need a shorter version of the product resource for mobile and the full version for the web.<\/p>\n<p class=\"graf graf--p\" style=\"padding-left: 30px\">- Clients don\u2019t want to deal with the complexities of backend like what if a Microservice is not available.<\/p>\n<p class=\"graf graf--p\">In the good old days of Monoliths and Server-side MVC, the controllers will be page-centric and act like a fa\u00e7ade that will call the required backend services, compose them all and give it in one shot to the client. This kept things simple and helped in performance as it kept the chattiness down.<\/p>\n<p class=\"graf graf--p\">So how do we address back-end design considerations and front end requirements? Enter Edge Server Pattern. It\u2019s also referred to as API gateway pattern, but I prefer not to use it as it brings other concerns into play like throttling, metrics etc.<\/p>\n<p class=\"graf graf--p\">Enter Edge Server Pattern. It\u2019s also referred to as API gateway pattern, but I prefer not to use it as it brings other concerns into play like throttling, metrics etc.<\/p>\n<p class=\"graf graf--p\">It\u2019s also referred to as API gateway pattern, but I prefer not to use it as it brings other concerns into play like throttling, metrics etc.<\/p>\n<p class=\"graf graf--p\">Edge server pattern helps in designing Microservices cleanly around bounded context and yet address front end requirements by putting an Edge server in front of this.<\/p>\n<p class=\"graf graf--p\">Following are some of the ways we have implemented Edge Server pattern in our projects.<\/p>\n<p class=\"graf graf--p\">The way to do this is to keep the MS and granularity, designs, responsibilities and REST API design very specific to what the backend needs. Design them cleanly about bounded context<\/p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">There are 3 options:<\/strong><\/p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--li-strong\">1.Roll your own<\/strong><\/p>\n<p class=\"graf graf--p\">Implement our own UI server which is basically a Spring boot app or Node\/Loopback app which is a single point of contact for all front ends. This server implements the facades that are client-centric. In one shot, it will call the Microservices needed, compose the results and serve it back to the client.<\/p>\n<p class=\"graf graf--p\">This fa\u00e7ade is also responsible for looking at the user agent and determining what this particular client might need and projecting only those attributes needed. Once again referring to the product page example, might return a product name, price, and thumbnail for mobile and a full resource for the web.<\/p>\n<p class=\"graf graf--p\">Usually, this UI server also handles the responsibility of serving the UI assets.<\/p>\n<p class=\"graf graf--p\"><strong>Pros:<\/strong><\/p>\n<p class=\"graf graf--p\">Simple \u2014 doesn\u2019t introduce any new technology<\/p>\n<p class=\"graf graf--p\"><strong>Con:<\/strong><\/p>\n<p class=\"graf graf--p\">The server decides what the client needs. But the reality is clients know what data they need. This problem is precipitated when the types of clients increase.<\/p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">2. Leveraging an Edge server like Zuul<\/strong><\/p>\n<p class=\"graf graf--p\">Zuul is an edge service that provides dynamic routing, monitoring, resiliency, security, and more.<\/p>\n<p class=\"graf graf--p\">Here all the clients are pointing to Zuul. Based on the inbound request, Zuul looks up the appropriate services and essentially implements the fa\u00e7ade pattern.<\/p>\n<p class=\"graf graf--p\">A couple of niceties include calling the Microservices with the <a href=\"https:\/\/github.com\/Netflix\/Hystrix\/wiki\">Hystrix <\/a>to include the circuit breaker design pattern and using a service registry like <a class=\"markup--anchor markup--p-anchor\" href=\"https:\/\/github.com\/Netflix\/eureka\/wiki\/Eureka-at-a-glance\">Eureka <\/a>to make your MS location agnostic. Optionally Ribbon can be used for client-side load balancing.<\/p>\n<p class=\"graf graf--p\"><a class=\"markup--anchor markup--p-anchor\" href=\"https:\/\/github.com\/ReactiveX\/RxJava\/wiki\">RxJava<\/a> is a good candidate for implementing the fa\u00e7ade in Zuul.<\/p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Pros:<br \/>\n<\/strong>Powerful Edge service with sophisticated routing capabilities.<\/p>\n<p class=\"graf graf--p\">Can be leveraged for addressing other concerns like Authentication, Monitoring etc.<\/p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">Con:<br \/>\n<\/strong>Again server decides what the client needs.<\/p>\n<p class=\"graf graf--p\">Complexity because of additional technologies.<\/p>\n<p class=\"graf graf--p\"><strong class=\"markup--strong markup--p-strong\">3. GraphQL<\/strong><\/p>\n<p class=\"graf graf--p\">GraphQL is described as a query language for the API layer by Facebook which developed an open sourced it. Though not necessarily a full-fledged Edge server, it addresses the concerns stated earlier.<\/p>\n<p class=\"graf graf--p\">GraphQL is to REST API what an ORM (only the read part) is to the DB layer. As with an ORM, once you define your entity model and mapping the REST API, clients can specify what they want.<\/p>\n<blockquote><p>GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.<\/p><\/blockquote>\n<p class=\"graf graf--p\">Here is how a typical interaction looks like:<\/p>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https:\/\/d262ilb51hltx0.cloudfront.net\/max\/1400\/1*6XY-8B9-KiGm_6k37FZNpA.png\" alt=\"\" \/><\/figure>\n<figure class=\"graf graf--figure\"><img class=\"graf-image\" src=\"https:\/\/d262ilb51hltx0.cloudfront.net\/max\/1400\/1*6o3ts3Ur_CJY9KWSyW_rwA.png\" alt=\"\" width=\"758\" height=\"379\" \/><\/figure>\n<h6 class=\"graf graf--p\">Image courtesy:\u00a0http:\/\/bit.ly\/2eFKV6X<\/h6>\n<p class=\"graf graf--p\">In addition to client controlling what they want, they can also get many resources in a single request and each resource can be a partial or full representation.<\/p>\n<p class=\"graf graf--p\">If your client is built using React framework, you are in luck. Facebook has also released <a href=\"https:\/\/github.com\/ReactiveX\/RxJava\/wiki\"><strong class=\"markup--strong markup--p-strong\">Relay<\/strong> <\/a>which makes declarative data management possible for React front ends. This is a very nice abstraction of data instead of calling imperative APIs.<\/p>\n\t<hr>\n\t<p>\n\t\t<em>\n\t\t\tOriginally published at <a href=\"http:\/\/blog.ideas2it.com\/microservices-edge-server-pattern\/\">Ideas2IT Technology Services Pvt Ltd<\/a>.\t\t<\/em>\n\t<\/p>\n\t","tags":[],"contentFormat":"html","canonicalUrl":"http:\/\/blog.ideas2it.com\/microservices-edge-server-pattern\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2016-11-16T14:50:14+00:00","notifyFollowers":true}
[17-Nov-2016 07:17:06 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"6cf5556427bd","title":"Microservices  —  Edge Server Pattern","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/microservices-edge-server-pattern-6cf5556427bd","canonicalUrl":"http://blog.ideas2it.com/microservices-edge-server-pattern/","publishStatus":"public","publishedAt":1479307814000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":[]}}
[17-Nov-2016 14:32:59 UTC] Making request GET https://api.medium.com/v1/me: 
[17-Nov-2016 14:32:59 UTC] Received response (200 - application/json; charset=utf-8): {"data":{"id":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","username":"bhavani","name":"Bhavani","url":"https://medium.com/@bhavani","imageUrl":"https://cdn-images-1.medium.com/fit/c/200/200/0*sou5FZelZs7_W03q."}}
[17-Nov-2016 14:32:59 UTC] Making request GET https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/publications: 
[17-Nov-2016 14:33:00 UTC] Received response (200 - application/json; charset=utf-8): {"data":[]}
[21-Nov-2016 13:59:59 UTC] Making request POST https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/posts: {"title":"The future of IT Operations","content":"<h1>The future of IT Operations<\/h1>\n<p>You have deployed a plethora of monitoring and service management solutions. Yet do you have a good handle on<\/p>\n<ul>\n<li>What are the hot button issue(s) at any given time?<\/li>\n<li>What you need to prioritize?<\/li>\n<li>What is the best way to react to a situation?<\/li>\n<\/ul>\n<p>Better yet, what if you can know outages even before they happen!<\/p>\n<p>The next generation predictive IT Operations Analytics (ITOA) solutions are aiming to do just that.<\/p>\n<p><strong>Gartner<\/strong> predicts that in the coming years, Global 2000 companies will deploy IT Operations Analytics Platforms as a central component of their architecture for monitoring critical applications and IT services.<\/p>\n<p>Here are some interesting usecases that the next generation ITOA solves by leveraging Data Science and BigData.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Incident Correlation:<\/strong><\/p>\n<p>Multiple sources can create a flood of noisy alarms. ITOA intelligently clusters the IT alarms\/alerts into high-level incidents. This clustering reduces the noise and helps spot critical issues faster.<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/1.png\"><img class=\" size-full wp-image-1092 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/1.png\" alt=\"1\" width=\"665\" height=\"550\" \/><\/a><\/p>\n<p>The goal is to correlate, contextualize and create clusters of related alerts known as \u201csituations\u201d. Managing one or two situations is better than trying to manage thousands of disparate alerts. Once situations are created, all the relevant stakeholders (Dev, Ops, DBA, Sys Admin, etc.) can then be invited within a virtual war room to collaborate and resolve the incident.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Incident Scoring:<\/strong><\/p>\n<p>Once you have correlated your alerts into a few \u201csituations\u201d, how do you prioritize what your team should focus? Manual prioritization is subjective and often devolves into FIFO which is not optimal.<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/2.png\"><img class=\" size-full wp-image-1093 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/2.png\" alt=\"2\" width=\"651\" height=\"388\" \/><\/a><\/p>\n<p>Entry Data Science.<\/p>\n<p>Incidents are automatically prioritized by analyzing a comprehensive history of:<\/p>\n<ul>\n<li>Severity rank for incidents<\/li>\n<li>Level of disruption\/impact a situation has caused in the past<\/li>\n<li>End user experience<\/li>\n<li>Client importance<\/li>\n<li>Past escalations<\/li>\n<li>Incident duration<\/li>\n<li>And much more<\/li>\n<\/ul>\n<p>This will help your IT Operations to solve the problems that really matter.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Incident Resolution:<\/strong><\/p>\n<p>To resolve an incident in time and cost effective manner, the right resources in terms of people in past relevant resolutions, KB articles etc., needs to be identified efficiently.<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/3.png\"><img class=\" size-full wp-image-1094 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/3.png\" alt=\"3\" width=\"487\" height=\"310\" \/><\/a><\/p>\n<p>Once the incidents are correlated and a score is assigned, IT Operations Analytics applies ML (Machine Learning) techniques to<\/p>\n<ul>\n<li>Automate routing of tickets: Predict which group or individual the incident should be assigned to<\/li>\n<li>Recommend response: Shows up the best template response to use based on the incident\/situation<\/li>\n<li>Automate reply: Automatically respond to incident<\/li>\n<li>Automate root cause analysis<\/li>\n<\/ul>\n<p>Machine Learning Algorithms are also used to generate Bayesian Networks for Incident Duration Prediction.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Root Cause Analysis:<\/strong><\/p>\n<p>ITOA automatically analyzes all changes that occurred since the system was working fine, applying pattern and statistics based algorithms to identify the incident root cause. More often than not, 80% of the troubleshooting time is spent in solving 20% of the problem which revolves around the root cause.<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/4.png\"><img class=\"  wp-image-1095 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/4.png\" alt=\"4\" width=\"382\" height=\"191\" \/><\/a><\/p>\n<p>IT Operations Analytics applies machine learning to automatically sort through the massive volumes of log messages. It quickly and efficiently finds and identifies messages that are truly relevant, applies powerful analysis algorithms that self-learn over time, and leverages the knowledge of experts, enabling it to provide fresh insights to find the root cause of the problem every time. These insights can be applied to accelerate problem resolution and help prevent future issues.<\/p>\n<p>The above can be applied for<\/p>\n<ul>\n<li>Incident Management<\/li>\n<li>Problem Management<\/li>\n<li>Change Management<\/li>\n<li>Configuration Management<\/li>\n<\/ul>\n<p>&nbsp;<\/p>\n<p><strong>Incident Prediction:<\/strong><\/p>\n<p>The demands on modern IT infrastructure is such that reacting to an incident is too late. Emerging need is to predict incidents even before they happen. Machine learning techniques help us greatly in Incident prediction.<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/5.jpg\"><img class=\" size-full wp-image-1096 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2016\/11\/5.jpg\" alt=\"5\" width=\"600\" height=\"400\" \/><\/a><\/p>\n<p>Machine learning can be applied in real-time from multiple event sources to analyze and detect anomalies before they become systemic and are reported by end users. This can lead to a 75% reduction in MTTD (Mean Time To Detect).<\/p>\n<p>So should you care about what BigData and Data Science can do for you. Our conclusion is that given that ITOA\u2019s maturity level, we strongly suggest you invest in ITOA to have an efficient IT operations running if you have not done so already.<\/p>\n<p>&nbsp;<\/p>\n","tags":["Data science","IT Operations","itoa","Machine Learning"],"contentFormat":"html","canonicalUrl":"http:\/\/blog.ideas2it.com\/the-future-of-it-operations\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2016-11-21T13:59:59+00:00","notifyFollowers":true}
[21-Nov-2016 14:00:02 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"5e648b1a2c4c","title":"The future of IT Operations","authorId":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","url":"https://medium.com/@bhavani/the-future-of-it-operations-5e648b1a2c4c","canonicalUrl":"http://blog.ideas2it.com/the-future-of-it-operations/","publishStatus":"public","publishedAt":1479736799000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["itoa","data-science","machine-learning","it-operations"]}}
[02-Jan-2017 05:36:08 UTC] PHP Fatal error:  Call to undefined function __() in /home/bhraman/public_html/blog/wp-admin/menu.php on line 25
[06-Jan-2017 06:28:50 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"Microservices - Service Discovery","content":"<h1>Microservices - Service Discovery<\/h1>\n<p>In a monolithic architecture, we deployed a few application servers and statically registered them with load balancers. But in Microservices based architectures, inherently the services are mobile and can come and go because of auto-scaling, self-healing etc.<\/p>\n<p>So the clients need a way for looking up the services they want to talk to. Essentially we need a way for mapping logical service names to one or more network paths.<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-2.jpg\"><img class=\"  wp-image-1176 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-2-1024x412.jpg\" alt=\"service-discovery-2\" width=\"596\" height=\"240\" \/><\/a><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-2.jpg\"><br \/>\n<\/a><\/p>\n<p>&nbsp;<\/p>\n<p>To accomplish this, we need to implement a service discovery mechanism. This usually has 3 parts:<\/p>\n<ol>\n<li>Service registry: This is a database of all the services and their network locations.<\/li>\n<li>Strategy for building up this database. i.e., registering the services.<\/li>\n<li>Strategy for service lookup.<\/li>\n<\/ol>\n<p><strong>Service registry:<\/strong><\/p>\n<p>There are several great options for service registry these days. Netflix Eureka, Consul, ZooKeeper to name a few.<\/p>\n<p><strong>Registering the services:<\/strong><\/p>\n<p>Whenever a service starts up or shuts down, the service registry needs to know about this. This can be implemented in 2 ways.<\/p>\n<ul>\n<li>Self registration<\/li>\n<\/ul>\n<p>Every service when it starts up, registers with the service registry. If the registry requires meta-data, this also should be provided by the service itself. <a href=\"https:\/\/github.com\/Netflix\/eureka\">Netflix OSS Eureka client<\/a> is an example of this where each service registers with Eureka on startup and also sends a heartbeat every 30 seconds. If the heartbeat fails, Eureka removes the service from its registry.<\/p>\n<p>This is a bit of a design smell as the individual services have the\u00a0additional responsibility of knowing about the service registry. But it\u2019s a simple and easy to get started with.<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-1.jpg\"><img class=\"alignnone  wp-image-1178 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-1-1024x779.jpg\" alt=\"service-discovery-1\" width=\"474\" height=\"361\" \/><\/a><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-1.jpg\"><br \/>\n<\/a><\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li>Third party registration<\/li>\n<\/ul>\n<p>In this pattern, individual Microservices are blissfully unaware of service registry concerns. There is a third party component which discovers and registers Microservices by polling specific files in the deployment environment or by subscribing to events. This component is also responsible for de-registering services that are no longer available. This is more prevalent in more mature implementations.<\/p>\n<p><a href=\"https:\/\/github.com\/gliderlabs\/registrator\">Registrator<\/a> is a good example of this pattern. Here is a good article on this: <a href=\"https:\/\/www.airpair.com\/scalable-architecture-with-docker-consul-and-nginx\">https:\/\/www.airpair.com\/scalable-architecture-with-docker-consul-and-nginx<\/a>.<\/p>\n<p>A big advantage of this pattern is that services are decoupled from service registries. A disadvantage is that the third party component has to be installed and configured, but many Microservices environment like Kubernetes comes with one.<\/p>\n<p><strong>Service Lookup<\/strong><\/p>\n<p>Once the service registry database is built up, clients should be able to lookup services. This can be implemented in 2 ways:<\/p>\n<p>a) Client side discovery<\/p>\n<p>The client is responsible for connecting to the service registry and looking up the service. Similar to self-registration, a client is coupled with service registry concerns. Netflix OSS Ribbon is an example of this. Netflix Ribbon is used to lookup and communicate with services. Ribbon comes with the basic round robin based load balancing and fault tolerance.<\/p>\n<p>Though client\u2019s ability to implement custom load balancing strategies is touted as an advantage of this pattern, in our experience we have hardly seen the need for this.<\/p>\n<p>b) Server side discovery<\/p>\n<p>Here clients make the request for any service to a router\/load balancer which is responsible for talking to service registry returning a suitable service instance. The router can additionally help with metrics, AB testing, Canary releases etc.<\/p>\n<p>Another good option if you are in AWS and especially if you deploy your Microservices as Docker containers, is the newly launched AWS application load balancer. Here is a good article on this: <a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/service-discovery-an-amazon-ecs-reference-architecture\/\">https:\/\/aws.amazon.com\/blogs\/compute\/service-discovery-an-amazon-ecs-reference-architecture\/<\/a><\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/service-discovery-3.jpg\"><img class=\"alignnone size-large wp-image-1177 aligncenter\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/service-discovery-3-1024x439.jpg\" alt=\"service-discovery-3\" width=\"850\" height=\"364\" \/><\/a><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2017\/01\/Service-discovery-1.jpg\"><br \/>\n<\/a><\/p>\n<p>&nbsp;<\/p>\n","tags":[],"contentFormat":"html","canonicalUrl":"http:\/\/blog.ideas2it.com\/microservices-service-discovery\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2017-01-06T06:28:50+00:00","notifyFollowers":true}
[06-Jan-2017 06:28:52 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"f535159f0572","title":"Microservices — Service Discovery","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/microservices-service-discovery-f535159f0572","canonicalUrl":"http://blog.ideas2it.com/microservices-service-discovery/","publishStatus":"public","publishedAt":1483684130000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":[]}}
[23-Jan-2017 08:59:53 UTC] Making request POST https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/posts: {"title":"Why we choose Tableau?","content":"<h1>Why we choose Tableau?<\/h1>\n<p>We leverage our strength in traditional analysis and modeling with new age visualization tools to provide actionable <a href=\"http:\/\/ideas2it.com\/tableau-and-d3.html\">\u201cInsights on the go\u201d.<\/a><\/p>\n<p><!--more--><br \/>\nWhen it comes to visualization, our goto tool these days is Tableau. Why? Glad you asked.<br \/>\nComparing our experience in past projects with QlikView\/Spotfire\/Tableau, here are our observations:<\/p>\n<h3>Innovation:<\/h3>\n<p>Forget the feature set comparison. We like the overall philosophical approach of Tableau which completely throws the traditional BI thinking out of window. It questions the very need of fundamental BI artifacts like CUBES in this day of columnar databases, cheaper memory and large datasets. It is innovating at a much faster pace than its competitors.<\/p>\n<h3>Visual:<\/h3>\n<p>Tableau is clean head and shoulders above anything in terms of visual impact. From word clouds to bubble maps, visually it rocks. <a href=\"http:\/\/ideas2it.com\/tableau.html#md-different\">Here is a sample from our work.<\/a><\/p>\n<h3>Rich set of data sources:<\/h3>\n<p>Tableau offers better connectivity and connects natively to 17 data sources.<br \/>\nFor Ericsson we have used Tableau with VoltDB. <a href=\"http:\/\/www.tableausoftware.com\/products\/techspecs\">Here is the comprehensive list of data sources.<\/a><\/p>\n<h3>Scalable In-memory processing of data:<\/h3>\n<p>Tableau\u2019s data engine is not a true in-memory database a la QlikView. But instead uploading the whole data into RAM, it intelligently chooses the data to load into RAM. This gives the scalability needed for larger datasets. Ofcourse the downside is if a data will always fit into RAM, a pure in-memory solution will work better.<\/p>\n<h3>Mobile:<\/h3>\n<p>Tableau visualizations are automatically streamlined for mobile devices (iPad, Android Tablets) thus enabling the mobility where the data and reports can be accessed from anywhere.<\/p>\n<h3>Ease of use:<\/h3>\n<p>Tableau follows the modern GUI principles with no clutter. It offers the drag and drop user friendly interface that creates reports that look great right of the gate. This encourages business users to create their own reports.<\/p>\n<h3>Tableau Public and Reader:<\/h3>\n<p>Makes it easy to distribute the reports to a much wider audience.<\/p>\n<h4>We are not alone in saying this.<\/h4>\n<p>Gartner positions Tableau as a leader in the 2014 Magic Quadrant<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2015\/02\/gartner-mq-2014.png\"><img class=\"alignnone wp-image-219 size-full\" src=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2015\/02\/gartner-mq-2014.png\" alt=\"gartner-mq-2014\" width=\"936\" height=\"976\" \/><\/a><\/p>\n","tags":["BI","Tableau","tools"],"contentFormat":"html","canonicalUrl":"http:\/\/blog.ideas2it.com\/why-we-choose-tableau\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2014-07-29T13:02:31+00:00","notifyFollowers":true}
[23-Jan-2017 08:59:55 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"ca9a8a0a987d","title":"Why we choose Tableau?","authorId":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","url":"https://medium.com/@bhavani/why-we-choose-tableau-ca9a8a0a987d","canonicalUrl":"http://blog.ideas2it.com/why-we-choose-tableau/","publishStatus":"public","publishedAt":1406638951000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["tools","bi","tableau"]}}
[16-Feb-2017 12:01:41 UTC] Making request POST https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/posts: {"title":"Google Calendar : missing an important option!","content":"<h1>Google Calendar : missing an important option!<\/h1>\n<div class=\"entry-content\">\n<h3>Google Calendar gives only these options:<\/h3>\n<p>- Make changes and manage sharing<br \/>\n- Make changes to events<br \/>\n- See all event details<br \/>\n- See only Free\/Busy (hide details)<\/p>\n<p><!--more--><br \/>\n<a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2014\/11\/unnamed.png\"><img class=\"alignnone wp-image-436 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2014\/11\/unnamed.png\" alt=\"unnamed\" width=\"1011\" height=\"126\" \/><\/a><\/p>\n<p>How do you share your calendar to your secretary so that she can see if you are busy or not and create appointments accordingly? The only way now to share a calendar to someone who can create events in your calendar are the first 2 options in which even the \u2018Private\u2019 events show all details to the \u2018shared\u2019 people!<\/p>\n<p>How did Google miss this important option?<\/p>\n<\/div>\n","tags":["Calendar","Google"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/google-calendar-missing-an-important\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2014-11-24T06:41:06+00:00","notifyFollowers":true}
[16-Feb-2017 12:01:43 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"a143f1a352c2","title":"Google Calendar : missing an important option!","authorId":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","url":"https://medium.com/@bhavani/google-calendar-missing-an-important-option-a143f1a352c2","canonicalUrl":"http://www.ideas2it.com/blog/google-calendar-missing-an-important/","publishStatus":"public","publishedAt":1416811266000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["calendar","google"]}}
[16-Feb-2017 12:14:51 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"Hybrid Framework \u2013 Why we went with Ionic?","content":"<h1>Hybrid Framework \u2013 Why we went with Ionic?<\/h1>\n<div class=\"entry-content\">When we started\u00a0Hybrid\u00a0application development a few years back, our choices were\u00a0frameworks\u00a0like Sencha Touch and jQuery mobile which had their origin in web and were retrofitted for mobile. This never really worked well and gave Hybrid frameworks a bad reputation.<!--more--><br \/>\nAs a dev shop focusing a lot on\u00a0Hybrid\u00a0mobile application development, we are glad to see the momentum in mobile UI\u00a0frameworks\u00a0in the last year that are designed from scratch for mobile and applies the lessons learned from first generation\u00a0frameworks.We wanted to standardize on a free, open source\u00a0framework\u00a0for developing Hybrid mobile apps and compared Ionic, Kendo UI, Famo.us, FrameWork7, OnSen UI and many more and ended up choosing Ionic. Here is why.<\/p>\n<p><a href=\"http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2015\/02\/1.jpg\" target=\"_blank\"><img class=\"CToWUd\" src=\"https:\/\/ci4.googleusercontent.com\/proxy\/JGNAjSZ4LHBEF2O0D2IzSL-Nes8DXB_MyKc6_I5Wdi8oU64Jg3N8PhRkHEdUxSaP22caj0PJGQPyQE3mzney-zpUhkUOqjGyINI4RnH7Ow=s0-d-e1-ft#http:\/\/blog.ideas2it.com\/wp-content\/uploads\/2015\/02\/1.jpg\" alt=\"1\" width=\"834\" height=\"195\" \/><\/a><\/p>\n<p>We evaluated on the following criteria.<\/p>\n<ul>\n<li>Native Focus<\/li>\n<li>UI<\/li>\n<li>Performance<\/li>\n<li>Component library<\/li>\n<li>Angular integration (preferable)<\/li>\n<li>Licensing (MIT, Apache or equivalent)<\/li>\n<li>Both Developer and Designer should like<\/li>\n<li>Momentum<\/li>\n<\/ul>\n<p><strong>Native Focus:<\/strong><br \/>\nWe wanted a mobile\u00a0framework\u00a0which focuses only on native apps with HTML5. Not general purposeframeworks\u00a0that target both web and mobile. Our experience is with these is that the mobile side of it gets saddled with a lot of web stuff and doesn\u2019t work well. Ionic is built from scratch focusing only on native which is great.<\/p>\n<p><strong>UI:<\/strong><br \/>\nWe wanted a UI which will work reasonably well for both iOS and Android. Ionic has a nice, simplistic flat UI which our designers like. No\u00a0Hybrid\u00a0UI is going to look completely native, but Ionic apps don\u2019t jump out or appear jarring on either platform.<\/p>\n<p><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/2.jpg\"><img class=\"alignnone wp-image-380 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/2.jpg\" alt=\"\" width=\"322\" height=\"561\" \/><\/a>\u00a0 \u00a0\u00a0\u00a0<a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/3.jpg\"><img class=\"alignnone wp-image-381 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/3.jpg\" alt=\"\" width=\"322\" height=\"561\" \/><\/a>\u00a0\u00a0\u00a0\u00a0 <a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/4.jpg\"><img class=\"alignnone wp-image-382 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/4.jpg\" alt=\"\" width=\"322\" height=\"561\" \/><\/a>We also found some of our favorite features for UX like pull to refresh are easy to add (<a href=\"http:\/\/ionicframework.com\/docs\/api\/directive\/ionRefresher\/\" target=\"_blank\">ion-refresher<\/a>) via directives,<a href=\"http:\/\/ionicframework.com\/docs\/api\/directive\/ionScroll\/\" target=\"_blank\">\u00a0scrollable panes<\/a>\u00a0and the controversial(!)\u00a0<a href=\"http:\/\/ionicframework.com\/docs\/api\/directive\/ionInfiniteScroll\/\" target=\"_blank\">infinite scroll<\/a>. Basically, all the \u201ctypical\u201d UX things you may need in your app are packaged into the\u00a0framework\u00a0and are pretty easy to use.<\/p>\n<p><strong>Performance:<\/strong><br \/>\nThis was a very important criteria and we wanted a library that is as close to native in perceived performance as possible. Ionic excels here. Right from their UI design they have learned from mistakes made by older\u00a0frameworks\u00a0like JQuery and avoided performance hogs like gradients, shadows etc. It does a lot of other things right like using hardware-based accelerators.<\/p>\n<p><strong>Component library:<\/strong><br \/>\nIt has a decent component library with\u00a0<a href=\"http:\/\/ionicframework.com\/docs\/components\/\" target=\"_blank\">36 widgets<\/a>. But it is not as comprehensive as those supported by Kendo UI or JQuery mobile. This is to be expected given it is relatively new. But what is available looks good and works fairly well.<\/p>\n<p><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/5.jpg\"><img class=\"alignnone wp-image-383 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/5.jpg\" alt=\"\" width=\"380\" height=\"801\" \/><\/a>\u00a0\u00a0\u00a0 <a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/6.jpg\"><img class=\"alignnone wp-image-384 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/6.jpg\" alt=\"\" width=\"380\" height=\"801\" \/><\/a>\u00a0 \u00a0 <a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/7.jpg\"><img class=\"alignnone wp-image-385 size-full\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2015\/02\/7.jpg\" alt=\"\" width=\"380\" height=\"801\" \/><\/a><strong>Angular:<\/strong><br \/>\nWe wanted good application\u00a0framework\u00a0support, preferably using Angular as our team has a lot of expertise in it. Ionic comes with out of box integration which is a big plus for us.<\/p>\n<p><strong>Licensing:<\/strong><br \/>\nIonic is MIT licensed which works great. It's free and open source which is especially a plus for early stage startups. For paid\u00a0<a href=\"http:\/\/www.telerik.com\/kendo-ui\" target=\"_blank\">Kendo UI<\/a>\u00a0is a strong contender.<\/p>\n<p><strong>Momentum:<\/strong><br \/>\nWe have made technology selections purely based on technical merit in the past and live to regret it! So these days we pay as much attention to momentum, ecosystem, and longevity. Ionic checks out here. Its a well funded profitable startup that has\u00a0<a href=\"http:\/\/techcrunch.com\/2014\/03\/10\/drifty-makers-of-the-ionic-mobile-framework-raise-1-million\/\" target=\"_blank\">raised $1 million seed funding from Arthur Ventures<\/a>, not just an open source project. It's a top 250 project in GitHub and last when I checked it had 1937 forks and 802 watches.<\/p>\n<p>Overall both developers and designers liked Ionic and we started building and so far happy with the choice.<\/p>\n<p><strong>Miscellaneous:<\/strong><\/p>\n<ul>\n<li>Decent integrated development environment and easy to get a developer started<\/li>\n<li>Creator looks promising, alas we have to wait for it. Meanwhile, we are using\u00a0<a href=\"https:\/\/monaca.io\/\" target=\"_blank\">Monaca<\/a>. If you like Monaca, get started\u00a0<a href=\"https:\/\/monaca.mobi\/en\/forum\/q\/53091d65fd1734cc410a3232\" target=\"_blank\">here<\/a>.<\/li>\n<\/ul>\n<p><strong>Some of the not so good things:<\/strong><\/p>\n<ul>\n<li>Documentation is still weak.<\/li>\n<li>Ways to go before catching component libraries of\u00a0frameworks\u00a0like Kendo UI.<\/li>\n<li>A bit buggy though it is fast improving.<\/li>\n<\/ul>\n<\/div>\n","tags":["HTML5 Hybrid Mobile App Framework","Hybrid","Mobile","mobile app framework"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/hybrid-framework-why-we-went-with-ionic\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2015-02-20T10:13:47+00:00","notifyFollowers":true}
[16-Feb-2017 12:14:54 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"75f3afa5e731","title":"Hybrid Framework — Why we went with Ionic?","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/hybrid-framework-why-we-went-with-ionic-75f3afa5e731","canonicalUrl":"http://www.ideas2it.com/blog/hybrid-framework-why-we-went-with-ionic/","publishStatus":"public","publishedAt":1424427227000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["mobile-app-framework","mobile","hybrid"]}}
[16-Feb-2017 13:02:43 UTC] Making request POST https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/posts: {"title":"Insight To Go \u2013 Mobile BI for Enterprise","content":"<h1>Insight To Go \u2013 Mobile BI for Enterprise<\/h1>\n<div class=\"entry-content\">Rapid fire visual analytics to better understand and explore your data using <strong>Tableau<\/strong>.<!--more--><\/p>\n<h4>Data Visualisation using Tableau<\/h4>\n<p>We analyse and visualise your large and complex data into dashboards and reports using Tableau. We have helped our clients improve their ability to innovate, measure, analyse and optimise business performance across their enterprise. With Tableau we unlock the power of your data.<\/p>\n<h4>Data Services<\/h4>\n<p>Great visualisation needs great data! We provide data solutions that address issues of data quality, accessibility and usability. We transform our client\u2019s raw data into powerful \u201cinsights to go\u201d with our data modelling using Talend and other such ETL tools. We expertise in Big Data Analysis and Data Mining.<\/p>\n<h4>Tableau Training<\/h4>\n<p>Tableau Software lets you graphically analyse virtually any structured data to produce beautiful charts, graphs, dashboards and reports within minutes. Our training and mentoring services are based on your business and data needs and aimed at improving user performance and skills.<\/p>\n<\/div>\n","tags":["BI","Mobile","Tableau"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/mobile-bi-for-enterprise\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2014-07-24T09:26:05+00:00","notifyFollowers":true}
[16-Feb-2017 13:02:45 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"7a41451c1baf","title":"Insight To Go — Mobile BI for Enterprise","authorId":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","url":"https://medium.com/@bhavani/insight-to-go-mobile-bi-for-enterprise-7a41451c1baf","canonicalUrl":"http://www.ideas2it.com/blog/mobile-bi-for-enterprise/","publishStatus":"public","publishedAt":1406193965000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["bi","mobile","tableau"]}}
[17-Feb-2017 12:46:51 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"Why we chose Loopback over Sails and Meteor","content":"<h1>Why we chose Loopback over Sails and Meteor<\/h1>\n<h2>The Context for using Loopback for our application<\/h2>\n<p>One of the first things we do in a typical Node.js project is to pick the appropriate Node framework from the plenty of choices available. Good thing - Lots of choices; Bad thing - Fragmented efforts and no framework with real momentum.<\/p>\n<h2>Our decision framework<\/h2>\n<p>We took a typical polyglot approach to a technology stack. The platform has 2 main components: one for intelligence (Data Crunching, Machine Learning, Text Analytics and so on). For this we finalized a stack of LUIGI, Elastic search, Spark, R and Python with a little bit of MongoDB thrown in.<br \/>\n<!--more--><br \/>\nThe second part of the platform is a typical business web application to expose output of the intelligent\u00a0platform, business workflows etc.,<\/p>\n<p>For this, we decided on Node.js because it lend itself well for micro-services architecture. Some of our UI is message driven. Having decided on Node.js, we needed a web application framework (if you are only looking for an API backend, there are other good options like <a href=\"http:\/\/senecajs.org\/\">http:\/\/senecajs.org\/<\/a>) for rapid application development. Some of our selection criteria were<\/p>\n<ul>\n<li>Integrated a la Rails<\/li>\n<li>Quick CRUD development<\/li>\n<li>Automatic API generation from CRUD<\/li>\n<li>Good horizontal starter functionality<\/li>\n<li>Integrated build, deploy, debug, monitor capability<\/li>\n<li>Critical mass adoption<\/li>\n<li>Ability to get to barebones node when needed<\/li>\n<li>Embedded socket.io for push messaging<\/li>\n<li>Decent ORM with auto managed associations etc<\/li>\n<li>Not tied to a front end framework as we want to use React<\/li>\n<li>Isomorphic Javascript compatible<\/li>\n<\/ul>\n<p>We considered the following frameworks:<\/p>\n<ul>\n<li>Sails.js<\/li>\n<li>Loopback<\/li>\n<li>Total.js<\/li>\n<li>Koa.js<\/li>\n<li>Meteor.js<\/li>\n<li>mean.io\/mean.js<\/li>\n<\/ul>\n<p>Unfortunately, in Node.js web framework landscape there is no one clear winner with mass adoption unlike for Rails for Ruby or Django for Python. There are lot of fragmentation with each framework having some nice features but with very little adoption.<\/p>\n<h2>The choices (Meteor vs. Sails vs. Loopback)<\/h2>\n<p>After the initial research, we quickly dropped Total.js and Koa.js because of considerations like lack of momentum, the strength of the organization behind it etc.<\/p>\n<p>We quickly dropped mean.io and mean.js because they are tightly married to Angular and retrofitting React is a lot of work.<\/p>\n<p>We gave more consideration to Meteor as it has nice features like:<\/p>\n<ul>\n<li>Fully integrated tool chain<\/li>\n<li>Very easy data to front end binding etc<\/li>\n<\/ul>\n<p>But dropped it because the choice meant that we couldn't have a pure Node.js runtime. Besides it was too opinionated, doesn't play nice with non-meteor specific third party components. Also, the front end was not switchable.<\/p>\n<p>Then it boiled down to Sails and Loopback. Sails had the most adoption and Loopback had the most recent momentum.<\/p>\n<h2>Sails it is. Sails it isn't.<\/h2>\n<p>We picked Sails because of the maturity, adoption, good documentation, availability of many useful plugins and our developer knowledge.<\/p>\n<p>Sails:<\/p>\n<p>5438 commits, 23 branches, 173 releases, 195 contributors<\/p>\n<p>Loopback:<\/p>\n<p>1705 commits, 44 branches, 95 releases, 62 contributors<\/p>\n<p>But quickly switched to Loopback because of 2 events.<\/p>\n<p>The Sails team have fragmented with most of the developers going to start a competing framework Trails.js (read this discussion: <a href=\"https:\/\/github.com\/balderdash-projects\/sails- webpack\/issues\/2\">shit hit the roof<\/a>. Also, though Sails had some decent GitHub statistics, when we delve deeper most of it turned to be cosmetic changes like read-me updates.<\/p>\n<h2>The fallback to Loopback<\/h2>\n<p>Finally, we decided to go with Loopback:<\/p>\n<ul>\n<li>Isomorphic model definitions<\/li>\n<li>Strong support for API creation - plays well with our Microservices strategy<\/li>\n<li>Clean separation between API server and client<\/li>\n<li>Baked in mobile client SDKs<\/li>\n<li>Powerful ACLs<\/li>\n<li>Secure with baked in cross XSS<\/li>\n<li>Good core code quality<\/li>\n<li>Good suite of surrounding tools like StrongLoop Arc, visual API composer, CLI code generators etc.<\/li>\n<li>Great recent momentum<\/li>\n<li>Pedigree of the core developers<\/li>\n<li>Commercial tools from StrongLoop which gives them a business incentive to keep investing into LoopBack<\/li>\n<\/ul>\n<p>IBM has acquired StrongLoop which will only increase the commitment to the commercial suite of products and keep the dedicated team working on Loopback funded. And IBM has a good track record of contributing to open source projects like Apache Spark, Cloud foundry etc.<\/p>\n<p>\"Originally posted at <a href=\"http:\/\/blog.pipecandy.com\/chose-loop-sails-meteor\/\" target=\"_blank\">PipeCandy<\/a> by Murali Vivekanandan\"<\/p>\n","tags":["Loopback","Meteor","Sails"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/why-we-chose-loopback-over-sails-and-meteor\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2016-03-29T09:06:56+00:00","notifyFollowers":true}
[17-Feb-2017 12:46:54 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"3c84b6d699a1","title":"Why we chose Loopback over Sails and Meteor","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/why-we-chose-loopback-over-sails-and-meteor-3c84b6d699a1","canonicalUrl":"http://www.ideas2it.com/blog/why-we-chose-loopback-over-sails-and-meteor/","publishStatus":"public","publishedAt":1459242416000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["sails","loopback","meteor"]}}
[17-Feb-2017 12:47:31 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"Cloud is not a glorified VPS","content":"<h1>Cloud is not a glorified VPS<\/h1>\n<p>In spite of the deafening hype around\u00a0cloud\u00a0technologies for the past few years, I am surprised at how anemically\u00a0Cloud\u00a0is leveraged by most companies that I come across. When a company or a person says that they are on the\u00a0cloud, a large percentage of them just mean getting to an EC2 instance and putting their app server \/ DB \/ etc of choice. This was available for the past decade from the VPS offerings. So what is so special about using a\u00a0cloud\u00a0like this?<\/p>\n<p>I have also seen some of our customers truly leverage the\u00a0cloud\u00a0to great competitive advantage. It is\u00a0not\u00a0rocket science. Just awareness of the options out there and changing development and deployment architecture to exploit it.<\/p>\n<p>I broadly classify the\u00a0cloud\u00a0features in 2 sets: IAAS features and Software block as a service.<\/p>\n<p><!--more--><\/p>\n<p><strong>IAAS:<\/strong><\/p>\n<p>Let's get the easy thing over with first.<\/p>\n<p>In addition to putting a credit card and getting an EC2 instance, leverage the true IAAS features to setup a programmable, scalable and highly available deployment using features like:<\/p>\n<p>\u2022 Availability Zones<br \/>\n\u2022 Auto scaling<br \/>\n\u2022\u00a0Cloud\u00a0watch<br \/>\n\u2022 IAM<\/p>\n<p>A detailed blog on some best practices and anti-patterns for AWS coming soon.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Software block as a service:<\/strong><\/p>\n<p>This is the more interesting and powerful\u00a0cloud\u00a0capability.<\/p>\n<p>I deliberately didn\u2019t use the word PAAS and coined the term SBAAS as many vendors are peddling many layers of services under this acronym. What I mean by Software block as a service are various software infrastructure components.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>RDS:<\/strong><\/p>\n<p>This is an easy one. Instead of getting an EC2 instance and deploying MySQL or Postgres on it, consider RDS. Saves a lot of pain in installing, patching and\u00a0not\u00a0to mention horizontal scaling like zero effort read replicas.<\/p>\n<p>Many startups are worried about cost when they go for services like RDS. Instead, they put MySQL on Digital Ocean as it is cheaper to start with. But if you take into account the manpower cost of deploying and maintaining and business cost of business continuity impact, I would say in most cases, RDS is the way to go.<\/p>\n<p>One of our customers runs RDS with some of the tables having billion+ rows. He hardly spends any time on DBA with RDS and if you compare it to the effort required to run this on your own hardware, its a no brainer.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Lambda:<\/strong><\/p>\n<p>This is really exciting service which facilitates the idiom of serverless architecture. If you have processing logic that you need to run in response to an event, the traditional way is to write this as a service and deploy it on an App server which is hosted on an EC2 instance. Then worry about capacity planning for this EC2 instance to meet the load expected.<\/p>\n<p>Compare this to Lambda. You will simply write the processing function in Java or JS, configure it to be called on an event like a Kinesis message or HTTP verb. That's it. No server deployment, no capacity planning. AWS will take care of provisioning the appropriate resources, call your Lambda and bill you for only what you have used.<\/p>\n<p>Let me give you an example. Recently we had to write a PDF service which needs to convert enterprise form into PDF and process all its attachments which can be of various types like excel or doc and append it to the PDF.<\/p>\n<p>Our initial approach was to write a Java service which will receive the request and call various PDF libraries like iText and Flying Saucer and deploy this on a Tomcat\/EC2. We needed to do the deployment and more importantly, capacity planning was a pain. All the PDF conversion libraries load the whole file in memory and are CPU intensive. We don\u2019t have an upper limit on the file size.<\/p>\n<p>Our second approach is to simply write a Lambda service which would call the same PDF conversion service. AWS takes care of all capacity headaches.<\/p>\n<p>You can even deploy small web apps by putting your Angular code on S3 and hook up your HTTP GET \/ POST to a Lambda function. This is a truly serverless web app.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>Kinesis:<\/strong><\/p>\n<p>To truly leverage\u00a0cloud, a drastic shift in how we think about architecture is needed. I will give you a boring example of ETL. The old approach is to run a batch solution using a set of complex tools. While there is a time and place for these architectures, here is a\u00a0cloud\u00a0based real time streaming architecture.<\/p>\n<p>If the problem is to move data from MySQL OLTP to OLAP star schema, use MySQL Binlog sniffer like <a href=\"https:\/\/github.com\/zendesk\/maxwell\" target=\"_blank\">https:\/\/github.com\/zendesk\/maxwell<\/a>\u00a0to convert deltas into a stream of kinesis events and leverage Lambda functions to transform and load. Slap D3 on this hosted on S3. Voila! Serverless, real-time analytics that can sell to handle millions of updates.<\/p>\n<p>&nbsp;<\/p>\n<p><strong>ELK:<\/strong><\/p>\n<p>For serious SAAS applications, deriving insights from logs is crucial. The popular open source option for this is the ELK stack. Anybody who has run a non-trivial ELK cluster will address to the complexity of it. Now Amazon provides Elk as a service.<\/p>\n<p>Gone are those days when application logs were meant for developers to debug. Instead, design a log separately for ingestion by ELK and analytics. Splunk is the popular enterprise option, but given its cost, ELK is becoming the dominant force. Now Amazon is taking the headache out of ELK ops, so you can focus on actual analytics with Kibana and\/or D3.<\/p>\n<p>There are many more software blocks on AWS and new ones are getting added at a fast pace. We will keep updating what we end up using here.<\/p>\n","tags":["Cloud","ELK","IAAS","Kinesis","Lambda","RDS","Software"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/cloud-is-not-a-glorified-vps\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2016-03-09T10:40:42+00:00","notifyFollowers":true}
[17-Feb-2017 12:47:33 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"221a04eccefe","title":"Cloud is not a glorified VPS","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/cloud-is-not-a-glorified-vps-221a04eccefe","canonicalUrl":"http://www.ideas2it.com/blog/cloud-is-not-a-glorified-vps/","publishStatus":"public","publishedAt":1457520042000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["elk","kinesis","iaas","cloud","lambda"]}}
[17-Feb-2017 12:51:26 UTC] Making request POST https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/posts: {"title":"Promoting your paid mobile app","content":"<h1>Promoting your paid mobile app<\/h1>\n<p>You had a great idea and you launched it. Kudos! Now comes the challenging part of promoting it.<\/p>\n<p><!--more--><br \/>\nA sure way of getting early traction is to get influential users and early adaptors to use\/review your app. If yours is a paid app, you need the promo codes to remove the friction of the app download.<\/p>\n<p>Couple of ways you can do it.<\/p>\n<p>Use Apple\u2019s out of the box promo codes. You need to <a title=\"post-production-checklist-for-ios-app\" href=\"http:\/\/blog.ideas2it.com\/7-must-dos-post-your-apps-launch\/\" target=\"_blank\">use iTunes Connect <\/a> and sent out the codes manually. It is for a limited number of users (100 users per every version of the app).<\/p>\n<p>Another good alternative is the <a title=\"Tokens\" href=\"http:\/\/usetokens.com\/\" target=\"_blank\">Tokens<\/a>. Tokens can be generated with one click inside the app and can be easily shared via email, Facebook, Twitter etc. You can test 5 tokens for free before buying it (unlimited tokens unlike promo codes). The good part is\u00a0 Tokens can be tracked to see if its redeemed or not.<\/p>\n<p>From our experience of promoting paid apps, we found the $29 well worth the price.<\/p>\n","tags":["iTunes","Mobile App","Tokens"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/promoting-your-paid-mobile-app\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2015-02-17T11:40:44+00:00","notifyFollowers":true}
[17-Feb-2017 12:51:28 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"609318c608bc","title":"Promoting your paid mobile app","authorId":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","url":"https://medium.com/@bhavani/promoting-your-paid-mobile-app-609318c608bc","canonicalUrl":"http://www.ideas2it.com/blog/promoting-your-paid-mobile-app/","publishStatus":"public","publishedAt":1424173244000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["tokens","itunes","mobile-app"]}}
[17-Feb-2017 12:54:36 UTC] Making request POST https://api.medium.com/v1/users/1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4/posts: {"title":"Is Node.js right for you?","content":"<h1>Is Node.js right for you?<\/h1>\n<p>If you are already using\u00a0Node.js, good for you! Please tell us your reasons for choosing in our comments section.<br \/>\nIf you are evaluating\u00a0Node, let me share some pointers from our experience on the good, bad and ugly.<\/p>\n<p><!--more--><\/p>\n<h3>Node.js\u00a0is great if your application is<\/h3>\n<ul>\n<li>IO bound. Though every language now has an event-driven framework (Rails EventMachine),\u00a0Node.js\u00a0is grounds-up for this and has the richest ecosystem of Asynchronous libraries.<\/li>\n<li>Real-time that requires a quick response but not a lot of heavy lifting per request.<\/li>\n<li>High concurrency.\u00a0Node.js\u2019s event based model plays really well here as against the traditional Thread per Request model.<\/li>\n<li>One ring to rule them all. If you prefer the same language in both client and server.<\/li>\n<li>If the team prefers a dynamic language and comes from a Ruby\/Rails or Python\/Django background.<\/li>\n<\/ul>\n<h3>Not so great<\/h3>\n<ul>\n<li>For CPU bound computation. For instance predictive analysis.<\/li>\n<li>The ecosystem is still not there compared to Java. It's fast maturing, but it is going to be a while before you see a Kafka or Drools in\u00a0Node.js.<\/li>\n<li>You are going to miss simple things like Database migrations. Nothing like Rails migrations or Play Framework Evolutions is available.<\/li>\n<li>Can sometimes lead to difficult to maintain deep-nested callbacks but various standard ways of tackling this are maturing.<\/li>\n<li>For Large code base. This is a personal preference. If you have a large code base, worked by different teams with a long shelf life, refactoring is a must. Statically typed languages have better tools support for this.<\/li>\n<\/ul>\n<h3>Non-Technical<\/h3>\n<p>If yours is an Enterprise application, especially on-premise, I would think twice before choosing MEAN stack. JVM based tools are accepted almost in any IT. IT Operations of many enterprises will not support stacks like\u00a0Node.js\u00a0or Rails.<\/p>\n<p>When we developed our own Radaptive PAAS product, given that we built our own type class system, something like Ruby\/Mongo was the best technical fit. But we chose to go with a JVM based stack. Radaptive is currently deployed successfully in clients like Ericsson and Motorola which would not have been possible at all with a non-JVM stack. If yours is a SAAS application, this is a moot point.<\/p>\n","tags":["js","NODE"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/is-node-js-right-for-you\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2014-07-24T13:18:53+00:00","notifyFollowers":true}
[17-Feb-2017 12:54:38 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"6801c2128c2a","title":"Is Node.js right for you?","authorId":"1a1bb1ec030f0d8f09f2e53f5419e3c7cbea907122f7742316dbda8ea37a392a4","url":"https://medium.com/@bhavani/is-node-js-right-for-you-6801c2128c2a","canonicalUrl":"http://www.ideas2it.com/blog/is-node-js-right-for-you/","publishStatus":"public","publishedAt":1406207933000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":["node","js"]}}
[20-Feb-2017 06:45:02 UTC] PHP Warning:  Missing argument 3 for Webdados_FB_Admin::options_wpml() in /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php on line 32
[20-Feb-2017 06:45:02 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php:32) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[20-Feb-2017 06:46:14 UTC] PHP Warning:  Missing argument 3 for Webdados_FB_Admin::options_wpml() in /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php on line 32
[20-Feb-2017 06:46:14 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php:32) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[20-Feb-2017 06:46:41 UTC] PHP Warning:  Missing argument 3 for Webdados_FB_Admin::options_wpml() in /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php on line 32
[20-Feb-2017 06:46:41 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php:32) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[20-Feb-2017 06:49:34 UTC] PHP Warning:  Missing argument 3 for Webdados_FB_Admin::options_wpml() in /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php on line 32
[20-Feb-2017 06:49:34 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php:32) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[20-Feb-2017 06:51:11 UTC] PHP Warning:  Missing argument 3 for Webdados_FB_Admin::options_wpml() in /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php on line 32
[20-Feb-2017 06:51:11 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-content/plugins/wonderm00ns-simple-facebook-open-graph-tags/admin/class-webdados-fb-open-graph-admin.php:32) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:18:31 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:18:31 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:18:44 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:18:44 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:18:48 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:18:48 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:19:13 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:19:13 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:19:44 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:19:44 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:20:16 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:20:16 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:20:54 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:20:54 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[21-Feb-2017 09:21:08 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[21-Feb-2017 09:21:08 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[23-Feb-2017 11:54:48 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[23-Feb-2017 11:54:48 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[23-Feb-2017 11:54:53 UTC] PHP Warning:  Missing argument 3 for get_term_by(), called in /home/bhraman/public_html/blog/wp-content/plugins/wpsso/lib/term.php on line 327 and defined in /home/bhraman/public_html/blog/wp-includes/taxonomy.php on line 1385
[23-Feb-2017 11:54:53 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /home/bhraman/public_html/blog/wp-includes/taxonomy.php:1385) in /home/bhraman/public_html/blog/wp-includes/pluggable.php on line 1174
[24-Feb-2017 10:04:44 UTC] Making request POST https://api.medium.com/v1/publications//posts: {"title":"Symfony Performance tips and tricks","content":"<h1>Symfony Performance tips and tricks<\/h1>\n<p style=\"text-align: justify;\">Many a times, there is a knock on Symfony framework that it is slow. Frequently you will hear quips like \u201cSymfony has a great set of features for building enterprise applications but performs worse than &lt;insert your framework here&gt;\u201d. There are also many benchmarks which will take a trivial use case and an untuned Symfony and paint a sorry picture.<\/p>\n<p style=\"text-align: justify;\">But we have rolled out pretty zippy applications that handle tons of loads using Symfony. We will share a few tips and tricks that we have used in our apps.<\/p>\n<p style=\"text-align: justify;\">First off, performance is an important aspect and cannot be an afterthought. Often teams will finish the functionality and then do a 'performance testing and fixing'\u00a0phase. It goes without saying that it is the wrong approach. The overall performance of the application is a culmination of many design decisions and implementation tricks and hence performance should be an exercise throughout the life cycle of the project.<\/p>\n<p style=\"text-align: justify;\">Given that at Ideas2IT, we offer performance and scalability as a service offering itself and invested in a partnership with AppDynamics, we have developed a framework that follows the cycle of <strong>Estimate, Measure, Profile, Implement\/Improve \u2013 Repeat<\/strong>, throughout the life cycle of a project to achieve desirable performance and scalability.<\/p>\n<p><b>Estimate:<\/b><br \/>\nIt is important to get an estimate of what is expected of the system in terms of<\/p>\n<ul style=\"margin-top: -18px;\">\n<li>Load<\/li>\n<li>Data Volume<\/li>\n<li>Availability<\/li>\n<li>Cost constraints<\/li>\n<\/ul>\n<p style=\"text-align: justify;\">If you don't do this exercise, we will under tune the system. And sometimes might over plan which can be a costly exercise.<\/p>\n<p style=\"text-align: justify;\"><b>Measure:<\/b><br \/>\nNever attempt to fix performance without measuring the performance profile of individual components at a detail level.<\/p>\n<p style=\"text-align: justify;\">Use a tool to generate load with the characteristics of our estimate. Our tool of choice for this is JMeter. We have also used SAAS tools like <a href=\"https:\/\/loadimpact.com\/\">Loadimpact<\/a> to avoid the effort of setting up load generating hardware. It's important that the load generator correlates to the estimated load. Don\u2019t go too small or too high. We usually try 2-3X of expected load. One best practice is also to keep increasing the load to know the breaking points for future planning.<\/p>\n<p style=\"text-align: justify;\"><b>Profile:<\/b><br \/>\nOnce you have your load suite running and you find bottlenecks in the system, please don\u2019t try to fix it. Though it sounds common sense, often we have seen developers thinking of a clever idea and implementing it which might improve the performance of the component by 20% but not making any dent at all on the overall performance. Many times this is because the component\u2019s contribution will be very small to the overall time taken.<\/p>\n<p style=\"text-align: justify;\">Use profilers for each part of the application and spend enough time on profiling before attempting to fix. Our experience is that on a slow request typically 80-90% will go in a particular part of the request. May be a slow query or slow DOM binding for instance.<\/p>\n<p style=\"text-align: justify;\">Our tools of choice for this:<\/p>\n<ul style=\"text-align: justify; margin-top: -20px;\">\n<li>FrontEnd - Google Chrome developer tools,\u00a0<a class=\"reference external\" href=\"https:\/\/github.com\/addyosmani\/psi\">PageSpeedInsight<\/a>,\u00a0<a class=\"reference external\" href=\"https:\/\/github.com\/macbre\/phantomas\">Phantomas<\/a><\/li>\n<li>PHP layer - <a title=\"BlackFire\" href=\"https:\/\/blackfire.io\/\">Blackfire<\/a>, Symfony profiler<\/li>\n<li>Database - Depends on the database. For instance, for MySQL, we use the inbuilt profiler and Jet profiler.<\/li>\n<\/ul>\n<p style=\"text-align: justify;\"><b>Implement\/Improve:<\/b><br \/>\nThere are a\u00a0lot of strategies for improving each part of a complex application. Parts being frontend, Symfony \/ App\u00a0layer and database.<\/p>\n<h3 style=\"text-align: justify; margin: 5px 0px;\">FrontEnd:<\/h3>\n<p style=\"text-align: justify;\">Page speed is very important for user\u2019s experience and often cited as the most important UX element these days. On top of it, if your application needs to be SEO friendly, then page speed is important as Google uses it as one of the variables to compute SEO rank.<\/p>\n<p style=\"text-align: justify;\">There are a lot of things that can be done to improve page speed (independent of the application speed).<br \/>\nIn any modern application, a large part of user\u2019s perceived performance is because of the time taken to get the data\/assets from server and rendering the UI. A typical profile of a request will look like<\/p>\n<p style=\"text-align: justify;\"><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/02\/screenshot.png\"><img class=\" size-full wp-image-1540 aligncenter\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/02\/screenshot.png\" alt=\"screenshot\" width=\"1200\" height=\"898\" data-wp-pid=\"1540\" \/><\/a><\/p>\n<p style=\"text-align: justify;\">Make sure your application gets an A on all metrics tracked by YSlow. Google maintains a nice set of rules for this:<br \/>\n<a href=\"https:\/\/developers.google.com\/speed\/docs\/insights\/rules\">https:\/\/developers.google.com\/speed\/docs\/insights\/rules<\/a>.<\/p>\n<p style=\"text-align: justify;\">Your biggest bang for the buck in terms of perceived performance will come from frontend tuning rather than Symfony\/Appserver.<\/p>\n<h3 style=\"text-align: justify; margin: 5px 0px;\">Database layer:<\/h3>\n<p style=\"text-align: justify;\">We will not go into details on what all we can do in the DB layer as it is a series of blogs in itself. But some pointers.<\/p>\n<p style=\"text-align: justify;\"><b>Slow query log:<\/b><br \/>\nEnable slow query log and make sure none of your queries do a\u00a0full table scan and return within a threshold we have defined. Many times, teams will clear the slow query log and then forget about it. Then in one release, a developer will check in a nasty join with full table scan on a couple of big tables which will drag the whole application down. So set up a process as part of your QA to verify this on every release. If you are deploying an NPM tool like New Relic or AppDynamics, there are more sophisticated ways.<\/p>\n<p style=\"text-align: justify;\">Many times, in spite of all right indices, you will find full table scans in slow query log. We will give one example, but there are many such cases.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\"># Time: 130816 11:40:12\r\n# User@Host: root[root] @ localhost [127.0.0.1]\r\n# Query_time: 7.168569  Lock_time: 0.000211 Rows_sent: 100000  Rows_examined: 200000\r\nSET timestamp=1376633412;\r\nselect schedule0_.id as col_0_0_, \r\nschedule0_.event_name as col_1_0_,\r\nschedule0_.description as col_2_0_,\r\nschedule0_.location as col_3_0_, \r\nschedule0_.event_type as col_4_0_, \r\nschedule0_.start_date as col_5_0_, \r\nschedule0_.end_date as col_6_0_, \r\nschedule0_.start_time as col_7_0_,\r\nschedule0_.end_time as col_8_0_,\r\nschedule0_.remind_before as col_9_0_, \r\nschedule0_.remind_time_type as col_10_0_,\r\nschedule0_.repeat_every as col_11_0_,\r\nschedule0_.sunday as col_12_0_,\r\nschedule0_.monday as col_13_0_,\r\nschedule0_.tuesday as col_14_0_,\r\nschedule0_.wednesday as col_15_0_,\r\nschedule0_.thursday as col_16_0_,\r\nschedule0_.friday as col_17_0_,\r\nschedule0_.saturday as col_18_0_,\r\nuser2_.id as col_19_0_ from ETEC_SCHEDULE\r\nschedule0_ inner join ETEC_EVENT_USERS\r\nusers1_ on schedule0_.id=users1_.event_id\r\ninner join ETEC_USER user2_ on users1_.user_id=user2_.id where\r\n<strong>(end_date between '2013-07-28' and '2013-09-08' or\r\nschedule0_.end_date<span style=\"color: #880000; font-weight: bold;\">&amp;gt;<\/span>'2013-09-08') and user2_.id='admin';<\/strong>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\">In this instance it turned out to be because of the comparison to date in the where clause.<\/p>\n<p style=\"text-align: justify;\">Just changing the where clause to fixed it.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: -0px; padding-bottom: 0px;\">schedule0_.start_date\r\n<span style=\"color: #880000; font-weight: bold;\">&amp;lt;<\/span>='2013-09-08' AND schedule0_.end_date<span style=\"color: #880000; font-weight: bold;\">&amp;gt;<\/span>='2013-07-28'\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\"><b>Polygot persistence:<\/b><br \/>\nStart with a database that is a good fit for most of your use-cases. Often this is a good old RDBMS. Then for specific use-cases which have different characteristics, choose a different DB. For instance, in one of our social apps, the table that tracked cumulative user activity grew by millions per day. We moved this table alone to Cassandra.<\/p>\n<p style=\"text-align: justify;\">In most of our applications, we deal with 2-3 databases.<\/p>\n<p style=\"text-align: justify;\"><b>Scale horizontally:<\/b><br \/>\nThis is again a much discussed topic but there is only so much you can do to tune a database. From the beginning, follow a share nothing architecture to help you scale horizontally when the need arises.<\/p>\n<h3 style=\"margin: 5px 0px;\">Symfony\/App layer:<\/h3>\n<p>Take care of the steps called out in Symfony documentation like byte code cache: <a href=\"http:\/\/symfony.com\/doc\/current\/performance.html\">http:\/\/symfony.com\/doc\/current\/performance.html<\/a>. One thing to note here that is different from what this documentation calls out is that the future of APC seems unstable. Consider using an alternative like Redis.<\/p>\n<p style=\"text-align: justify;\"><a name=\"_GoBack\"><\/a> And do the basic things like upgrading PHP. Performance gains in higher versions of PHP are quite high. For instance, just the difference between PHP 5.4 and 5.3 is quite measurable.<\/p>\n<p><b>Avoid n+1 query problem:<\/b><br \/>\nOften we will retrieve an object and an association to serve a page. One easy way of doing it is using Doctrine\u2019s findAll method. For instance, to display a category and its products in an eCommerce site:<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">{% for category in products %}\r\n<span style=\"color: #007700;\">&lt;product&gt;<\/span>\r\n<span style=\"color: #007700;\">&lt;h2&gt;<\/span>{{ product.description }}<span style=\"color: #007700;\">&lt;\/h2&gt;<\/span>\r\n<span style=\"color: #007700;\">&lt;p&gt;<\/span>Product: {{product.category.title }} {{ product. category.description }} created at {{ product.createdAt | date('d-m-Y H:i') }}<span style=\"color: #007700;\">&lt;\/p&gt;<\/span>\r\n<span style=\"color: #007700;\">&lt;\/product&gt;<\/span>\r\n{% endfor %}\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\">But if you check the Symfony profiler, there will be one query for category and one query for each product in that category.<\/p>\n<p style=\"text-align: justify;\">Instead, do an eager fetch as below.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">public function findAllCategoriesAndProducts ()\r\n{\r\n$qb = $this-&gt;createQueryBuilder(\u2018p\u2019);\r\n$qb-&gt;addSelect(\u2018x\u2019)\r\n-&gt;innerJoin(\u2018c.product\u2019, \u2018x\u2019);\r\nreturn $qb-&gt;getQuery()-&gt;getResult();\r\n}\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p><b>Bulk updating entities:<\/b><br \/>\nThis is a simple one, but novice developers to ORMs often do this to update an attribute in multiple entities:<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">$newExpiryAt = new \\DateTime();\r\n$product = $this-&gt;getDoctrine()-&gt;getRepository(\u2018AcmeDemoBundle:Product\u2019)-&gt;findAll();\r\n\/** @var Product $product *\/\r\nforeach ($products as $product) {\r\n$product-&gt;setExpiryAt($newExpiryAt);\r\n}\r\n$this-&gt;getDoctrine()-&gt;getManager()-&gt;flush();\r\n<\/pre>\n<\/div>\n<p style=\"text-align: justify;\">Instead bulk update using:<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">{\r\n$qb = $this-&gt;createQueryBuilder(\u2018p\u2019);\r\n$qb-&gt;update()\r\n-&gt;set(\u2018p.expiryAt\u2019, \u2018:newExpiryAt\u2019)\r\n-&gt;setParameter(\u2018newExpiryAt\u2019, $newExpiryAt);\r\nreturn $qb-&gt;getQuery()-&gt;execute();\r\n}\r\n<\/pre>\n<\/div>\n<p style=\"text-align: justify;\">Don\u2019t bind to a container and then query for required service. Instead, inject the service directly. If you want to know all the available services in a large code base, you can do it by<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; text-align: justify; padding: 5px !important 0.1em 0.1em 0.1em;\">\n<pre style=\"margin: 0; line-height: 100%; padding-top: 0px; padding-bottom: 0px;\">Php app \/ console debug: container\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\">Use a gateway cache to improve performance and bring down the load on app server.<\/p>\n<p><b>Cache actions where you can:<\/b><br \/>\nIn our experience, the biggest performance impact is often achieved by proper caching.<br \/>\nWe already saw caching assets in browser cache, usage of CDN etc in the front end section.<br \/>\nIn the app server layer, you can cache entire pages or parts of pages (fragments), and service level data. This drastically brings down the response time of the request. In addition, it brings down the overall load on the system so that even cache misses are served faster.<\/p>\n<p><b>Caching pages or fragments:<\/b><br \/>\nEntire pages or part of pages can be cached with Vanish + ESI. Even in a dynamic application, there are views which is suitable for caching and need not be accurate with real-time information. For instance, comments on blog or recommendations. A good blog on caching fundamentals: <a href=\"http:\/\/2ndscale.com\/rtomayko\/2008\/things-caches-do\">http:\/\/2ndscale.com\/rtomayko\/2008\/things-caches-do<\/a><\/p>\n<p style=\"text-align: justify;\">Though Symfony has an inbuilt proxy, always use a purpose built reverse proxy like Varnish. Varnish consistently outperforms Symfony\u2019s inbuilt proxy. <a href=\"https:\/\/www.symfony.fi\/entry\/symfony-benchmarks-symfony-proxy-vs-varnish\">https:\/\/www.symfony.fi\/entry\/symfony-benchmarks-symfony-proxy-vs-varnish<\/a><\/p>\n<p><b>Caching service data:<\/b><br \/>\nThis can be done either at the ORM level by caching query results etc or\/and more higher level caches. Often times we end up using 2 or more cache layers \u2013 cache chaining pattern.<\/p>\n<p>Few Symfony specific caching steps:<\/p>\n<ul style=\"margin-top: -20px;\">\n<li style=\"text-align: justify;\">Enable query cache (this is different from query result cache). This converts the DQL query into its SQL counterpart. You would think it would be enabled by default, but its not.<\/li>\n<li style=\"text-align: justify;\">Enable meta data cache. This caches the parse meta data from annotations or XML configurations instead of doing it on every request.<\/li>\n<li style=\"text-align: justify;\">Cache query results for often requested queries on slow changing data. You can cache raw SQL result data or explicitly cache the hydrated object.<\/li>\n<li style=\"text-align: justify;\">For really demanding applications, side step the ORM, directly get data as associative arrays using Doctrine DBAL and construct the object graph in the App layer.<\/li>\n<li style=\"text-align: justify;\">Though declarative object graphs are nice from design perspective, they are performance night mares for ORMs. So use one-to-many and many-to-many associations only as needed. And almost always avoid bi-directional associations. If you do use a lot of associations, consider doing multi-step hydration.<\/li>\n<\/ul>\n","tags":[],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/symfony-performance-tips-tricks\/","license":null,"publishStatus":null,"publishedAt":"2017-02-23T14:07:54+00:00","notifyFollowers":false}
[24-Feb-2017 10:04:44 UTC] Received response (400 - application/json; charset=utf-8): {"errors":[{"message":"No publication ID specified","code":2013}]}
[24-Feb-2017 10:04:44 UTC] API ERROR: No publication ID specified (2013)
[01-Mar-2017 11:53:10 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"Symfony Performance tips and tricks","content":"<h1>Symfony Performance tips and tricks<\/h1>\n<p style=\"text-align: justify;\">Many a times, there is a knock on Symfony framework that it is slow. Frequently you will hear quips like \u201cSymfony has a great set of features for building enterprise applications but performs worse than &lt;insert your framework here&gt;\u201d. There are also many benchmarks which will take a trivial use case and an untuned Symfony and paint a sorry picture.<\/p>\n<p style=\"text-align: justify;\">But we have rolled out pretty zippy applications that handle tons of loads using Symfony. We will share a few tips and tricks that we have used in our apps.<\/p>\n<p style=\"text-align: justify;\">First off, performance is an important aspect and cannot be an afterthought. Often teams will finish the functionality and then do a 'performance testing and fixing'\u00a0phase. It goes without saying that it is the wrong approach. The overall performance of the application is a culmination of many design decisions and implementation tricks and hence performance should be an exercise throughout the life cycle of the project.<\/p>\n<p style=\"text-align: justify;\">Given that at Ideas2IT, we offer performance and scalability as a service offering itself and invested in a partnership with AppDynamics, we have developed a framework that follows the cycle of <strong>Estimate, Measure, Profile, Implement\/Improve \u2013 Repeat<\/strong>, throughout the life cycle of a project to achieve desirable performance and scalability.<\/p>\n<p><b>Estimate:<\/b><br \/>\nIt is important to get an estimate of what is expected of the system in terms of<\/p>\n<ul style=\"margin-top: -18px;\">\n<li>Load<\/li>\n<li>Data Volume<\/li>\n<li>Availability<\/li>\n<li>Cost constraints<\/li>\n<\/ul>\n<p style=\"text-align: justify;\">If you don't do this exercise, we will under tune the system. And sometimes might over plan which can be a costly exercise.<\/p>\n<p style=\"text-align: justify;\"><b>Measure:<\/b><br \/>\nNever attempt to fix performance without measuring the performance profile of individual components at a detail level.<\/p>\n<p style=\"text-align: justify;\">Use a tool to generate load with the characteristics of our estimate. Our tool of choice for this is JMeter. We have also used SAAS tools like <a href=\"https:\/\/loadimpact.com\/\">Loadimpact<\/a> to avoid the effort of setting up load generating hardware. It's important that the load generator correlates to the estimated load. Don\u2019t go too small or too high. We usually try 2-3X of expected load. One best practice is also to keep increasing the load to know the breaking points for future planning.<\/p>\n<p style=\"text-align: justify;\"><b>Profile:<\/b><br \/>\nOnce you have your load suite running and you find bottlenecks in the system, please don\u2019t try to fix it. Though it sounds common sense, often we have seen developers thinking of a clever idea and implementing it which might improve the performance of the component by 20% but not making any dent at all on the overall performance. Many times this is because the component\u2019s contribution will be very small to the overall time taken.<\/p>\n<p style=\"text-align: justify;\">Use profilers for each part of the application and spend enough time on profiling before attempting to fix. Our experience is that on a slow request typically 80-90% will go in a particular part of the request. May be a slow query or slow DOM binding for instance.<\/p>\n<p style=\"text-align: justify;\">Our tools of choice for this:<\/p>\n<ul style=\"text-align: justify; margin-top: -20px;\">\n<li>FrontEnd - Google Chrome developer tools,\u00a0<a class=\"reference external\" href=\"https:\/\/github.com\/addyosmani\/psi\">PageSpeedInsight<\/a>,\u00a0<a class=\"reference external\" href=\"https:\/\/github.com\/macbre\/phantomas\">Phantomas<\/a><\/li>\n<li>PHP layer - <a title=\"BlackFire\" href=\"https:\/\/blackfire.io\/\">Blackfire<\/a>, Symfony profiler<\/li>\n<li>Database - Depends on the database. For instance, for MySQL, we use the inbuilt profiler and Jet profiler.<\/li>\n<\/ul>\n<p style=\"text-align: justify;\"><b>Implement\/Improve:<\/b><br \/>\nThere are a\u00a0lot of strategies for improving each part of a complex application. Parts being frontend, Symfony \/ App\u00a0layer and database.<\/p>\n<h3 style=\"text-align: justify; margin: 5px 0px;\">FrontEnd:<\/h3>\n<p style=\"text-align: justify;\">Page speed is very important for user\u2019s experience and often cited as the most important UX element these days. On top of it, if your application needs to be SEO friendly, then page speed is important as Google uses it as one of the variables to compute SEO rank.<\/p>\n<p style=\"text-align: justify;\">There are a lot of things that can be done to improve page speed (independent of the application speed).<br \/>\nIn any modern application, a large part of user\u2019s perceived performance is because of the time taken to get the data\/assets from server and rendering the UI. A typical profile of a request will look like<\/p>\n<p style=\"text-align: justify;\"><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/02\/screenshot.png\"><img class=\" size-full wp-image-1540 aligncenter\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/02\/screenshot.png\" alt=\"screenshot\" width=\"1200\" height=\"898\" data-wp-pid=\"1540\" \/><\/a><\/p>\n<p style=\"text-align: justify;\">Make sure your application gets an A on all metrics tracked by YSlow. Google maintains a nice set of rules for this:<br \/>\n<a href=\"https:\/\/developers.google.com\/speed\/docs\/insights\/rules\">https:\/\/developers.google.com\/speed\/docs\/insights\/rules<\/a>.<\/p>\n<p style=\"text-align: justify;\">Your biggest bang for the buck in terms of perceived performance will come from frontend tuning rather than Symfony\/Appserver.<\/p>\n<h3 style=\"text-align: justify; margin: 5px 0px;\">Database layer:<\/h3>\n<p style=\"text-align: justify;\">We will not go into details on what all we can do in the DB layer as it is a series of blogs in itself. But some pointers.<\/p>\n<p style=\"text-align: justify;\"><b>Slow query log:<\/b><br \/>\nEnable slow query log and make sure none of your queries do a\u00a0full table scan and return within a threshold we have defined. Many times, teams will clear the slow query log and then forget about it. Then in one release, a developer will check in a nasty join with full table scan on a couple of big tables which will drag the whole application down. So set up a process as part of your QA to verify this on every release. If you are deploying an NPM tool like New Relic or AppDynamics, there are more sophisticated ways.<\/p>\n<p style=\"text-align: justify;\">Many times, in spite of all right indices, you will find full table scans in slow query log. We will give one example, but there are many such cases.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border: solid gray; border-width: .1em .1em .1em .8em; padding: .2em .6em;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\"># Time: 130816 11:40:12\r\n# User@Host: root[root] @ localhost [127.0.0.1]\r\n# Query_time: 7.168569  Lock_time: 0.000211 Rows_sent: 100000  Rows_examined: 200000\r\nSET timestamp=1376633412;\r\nselect schedule0_.id as col_0_0_, \r\nschedule0_.event_name as col_1_0_,\r\nschedule0_.description as col_2_0_,\r\nschedule0_.location as col_3_0_, \r\nschedule0_.event_type as col_4_0_, \r\nschedule0_.start_date as col_5_0_, \r\nschedule0_.end_date as col_6_0_, \r\nschedule0_.start_time as col_7_0_,\r\nschedule0_.end_time as col_8_0_,\r\nschedule0_.remind_before as col_9_0_, \r\nschedule0_.remind_time_type as col_10_0_,\r\nschedule0_.repeat_every as col_11_0_,\r\nschedule0_.sunday as col_12_0_,\r\nschedule0_.monday as col_13_0_,\r\nschedule0_.tuesday as col_14_0_,\r\nschedule0_.wednesday as col_15_0_,\r\nschedule0_.thursday as col_16_0_,\r\nschedule0_.friday as col_17_0_,\r\nschedule0_.saturday as col_18_0_,\r\nuser2_.id as col_19_0_ from ETEC_SCHEDULE\r\nschedule0_ inner join ETEC_EVENT_USERS\r\nusers1_ on schedule0_.id=users1_.event_id\r\ninner join ETEC_USER user2_ on users1_.user_id=user2_.id where\r\n<strong>(end_date between '2013-07-28' and '2013-09-08' or\r\nschedule0_.end_date &gt;'2013-09-08') and user2_.id='admin';<\/strong>\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\">In this instance it turned out to be because of the comparison to date in the where clause.<\/p>\n<p style=\"text-align: justify;\">Just changing the where clause to fixed it.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: -0px; padding-bottom: 0px;\">schedule0_.start_date&lt;='2013-09-08' AND schedule0_.end_date&gt;='2013-07-28'\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\"><b>Polygot persistence:<\/b><br \/>\nStart with a database that is a good fit for most of your use-cases. Often this is a good old RDBMS. Then for specific use-cases which have different characteristics, choose a different DB. For instance, in one of our social apps, the table that tracked cumulative user activity grew by millions per day. We moved this table alone to Cassandra.<\/p>\n<p style=\"text-align: justify;\">In most of our applications, we deal with 2-3 databases.<\/p>\n<p style=\"text-align: justify;\"><b>Scale horizontally:<\/b><br \/>\nThis is again a much discussed topic but there is only so much you can do to tune a database. From the beginning, follow a share nothing architecture to help you scale horizontally when the need arises.<\/p>\n<h3 style=\"margin: 5px 0px;\">Symfony\/App layer:<\/h3>\n<p>Take care of the steps called out in Symfony documentation like byte code cache: <a href=\"http:\/\/symfony.com\/doc\/current\/performance.html\">http:\/\/symfony.com\/doc\/current\/performance.html<\/a>. One thing to note here that is different from what this documentation calls out is that the future of APC seems unstable. Consider using an alternative like Redis.<\/p>\n<p style=\"text-align: justify;\"><a name=\"_GoBack\"><\/a> And do the basic things like upgrading PHP. Performance gains in higher versions of PHP are quite high. For instance, just the difference between PHP 5.4 and 5.3 is quite measurable.<\/p>\n<p><b>Avoid n+1 query problem:<\/b><br \/>\nOften we will retrieve an object and an association to serve a page. One easy way of doing it is using Doctrine\u2019s findAll method. For instance, to display a category and its products in an eCommerce site:<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">{% for category in products %}\r\n<span style=\"color: #007700;\">&lt;product&gt;<\/span>\r\n<span style=\"color: #007700;\">&lt;h2&gt;<\/span>{{ product.description }}<span style=\"color: #007700;\">&lt;\/h2&gt;<\/span>\r\n<span style=\"color: #007700;\">&lt;p&gt;<\/span>Product: {{product.category.title }} {{ product. category.description }} created at {{ product.createdAt | date('d-m-Y H:i') }}<span style=\"color: #007700;\">&lt;\/p&gt;<\/span>\r\n<span style=\"color: #007700;\">&lt;\/product&gt;<\/span>\r\n{% endfor %}\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\">But if you check the Symfony profiler, there will be one query for category and one query for each product in that category.<\/p>\n<p style=\"text-align: justify;\">Instead, do an eager fetch as below.<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">public function findAllCategoriesAndProducts ()\r\n{\r\n$qb = $this-&gt;createQueryBuilder(\u2018p\u2019);\r\n$qb-&gt;addSelect(\u2018x\u2019)\r\n-&gt;innerJoin(\u2018c.product\u2019, \u2018x\u2019);\r\nreturn $qb-&gt;getQuery()-&gt;getResult();\r\n}\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p><b>Bulk updating entities:<\/b><br \/>\nThis is a simple one, but novice developers to ORMs often do this to update an attribute in multiple entities:<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">$newExpiryAt = new \\DateTime();\r\n$product = $this-&gt;getDoctrine()-&gt;getRepository(\u2018AcmeDemoBundle:Product\u2019)-&gt;findAll();\r\n\/** @var Product $product *\/\r\nforeach ($products as $product) {\r\n$product-&gt;setExpiryAt($newExpiryAt);\r\n}\r\n$this-&gt;getDoctrine()-&gt;getManager()-&gt;flush();\r\n<\/pre>\n<\/div>\n<p style=\"text-align: justify;\">Instead bulk update using:<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; padding: 0.2em 0.6em; text-align: justify;\">\n<pre style=\"margin: 0; line-height: 125%; padding-top: 0px; padding-bottom: 0px;\">{\r\n$qb = $this-&gt;createQueryBuilder(\u2018p\u2019);\r\n$qb-&gt;update()\r\n-&gt;set(\u2018p.expiryAt\u2019, \u2018:newExpiryAt\u2019)\r\n-&gt;setParameter(\u2018newExpiryAt\u2019, $newExpiryAt);\r\nreturn $qb-&gt;getQuery()-&gt;execute();\r\n}\r\n<\/pre>\n<\/div>\n<p style=\"text-align: justify;\">Don\u2019t bind to a container and then query for required service. Instead, inject the service directly. If you want to know all the available services in a large code base, you can do it by<\/p>\n<div style=\"background: #ffffff; overflow: auto; width: auto; border-style: solid; border-color: gray; border-image: initial; border-width: 0.1em 0.1em 0.1em 0.8em; text-align: justify; padding: 5px !important 0.1em 0.1em 0.1em;\">\n<pre style=\"margin: 0; line-height: 100%; padding-top: 0px; padding-bottom: 0px;\">Php app \/ console debug: container\r\n<\/pre>\n<\/div>\n<p>&nbsp;<\/p>\n<p style=\"text-align: justify;\">Use a gateway cache to improve performance and bring down the load on app server.<\/p>\n<p><b>Cache actions where you can:<\/b><br \/>\nIn our experience, the biggest performance impact is often achieved by proper caching.<br \/>\nWe already saw caching assets in browser cache, usage of CDN etc in the front end section.<br \/>\nIn the app server layer, you can cache entire pages or parts of pages (fragments), and service level data. This drastically brings down the response time of the request. In addition, it brings down the overall load on the system so that even cache misses are served faster.<\/p>\n<p><b>Caching pages or fragments:<\/b><br \/>\nEntire pages or part of pages can be cached with Vanish + ESI. Even in a dynamic application, there are views which is suitable for caching and need not be accurate with real-time information. For instance, comments on blog or recommendations. A good blog on caching fundamentals: <a href=\"http:\/\/2ndscale.com\/rtomayko\/2008\/things-caches-do\">http:\/\/2ndscale.com\/rtomayko\/2008\/things-caches-do<\/a><\/p>\n<p style=\"text-align: justify;\">Though Symfony has an inbuilt proxy, always use a purpose built reverse proxy like Varnish. Varnish consistently outperforms Symfony\u2019s inbuilt proxy. <a href=\"https:\/\/www.symfony.fi\/entry\/symfony-benchmarks-symfony-proxy-vs-varnish\">https:\/\/www.symfony.fi\/entry\/symfony-benchmarks-symfony-proxy-vs-varnish<\/a><\/p>\n<p><b>Caching service data:<\/b><br \/>\nThis can be done either at the ORM level by caching query results etc or\/and more higher level caches. Often times we end up using 2 or more cache layers \u2013 cache chaining pattern.<\/p>\n<p>Few Symfony specific caching steps:<\/p>\n<ul style=\"margin-top: -20px;\">\n<li style=\"text-align: justify;\">Enable query cache (this is different from query result cache). This converts the DQL query into its SQL counterpart. You would think it would be enabled by default, but its not.<\/li>\n<li style=\"text-align: justify;\">Enable meta data cache. This caches the parse meta data from annotations or XML configurations instead of doing it on every request.<\/li>\n<li style=\"text-align: justify;\">Cache query results for often requested queries on slow changing data. You can cache raw SQL result data or explicitly cache the hydrated object.<\/li>\n<li style=\"text-align: justify;\">For really demanding applications, side step the ORM, directly get data as associative arrays using Doctrine DBAL and construct the object graph in the App layer.<\/li>\n<li style=\"text-align: justify;\">Though declarative object graphs are nice from design perspective, they are performance night mares for ORMs. So use one-to-many and many-to-many associations only as needed. And almost always avoid bi-directional associations. If you do use a lot of associations, consider doing multi-step hydration.<\/li>\n<\/ul>\n","tags":[],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/symfony-performance-tips-tricks\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2017-02-23T14:07:54+00:00","notifyFollowers":true}
[01-Mar-2017 11:53:13 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"765f7425da4f","title":"Symfony Performance tips and tricks","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/symfony-performance-tips-and-tricks-765f7425da4f","canonicalUrl":"http://www.ideas2it.com/blog/symfony-performance-tips-tricks/","publishStatus":"public","publishedAt":1487858874000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":[]}}
[06-Apr-2017 15:58:51 UTC] Making request POST https://api.medium.com/v1/publications//posts: {"title":"9 Production Ready Node.js Tips and Tricks","content":"<h1>9 Production Ready Node.js Tips and Tricks<\/h1>\n<p class=\"western\">How often have you heard \u201cWell, it worked on dev and stage!\u201d when things crash on prod? Hopefully, this post will change all that.<\/p>\n<p>Here are nine tips on deploying scalable Node.js applications into production.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 1: Get your deployment architecture right<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">A typical deployment might look like (simplified)<\/p>\n<p><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_arch.jpg\" target=\"_blank\"><img class=\"alignnone wp-image-1684 size-full\" style=\"border: 1px solid #ccc;\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_arch.jpg\" alt=\"node-js-tip-architecture\" width=\"638\" height=\"359\" data-wp-pid=\"1684\" \/><\/a><\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 2:\u00a0Use a reverse proxy<\/h3>\n<p>Don\u2019t expose your Node.js app server directly to incoming HTTP traffic. Always put a reverse proxy in front of it to handle concerns like<\/p>\n<ul>\n<li>SSL termination<\/li>\n<li>Serving static content<\/li>\n<li>Caching slow changing parts of site<\/li>\n<li>Gzip compression and more<\/li>\n<\/ul>\n<p>Popular alternatives are Nginx and Apache. Of late, we have been using Nginx for all our applications with good results. Remember to proxy your web socket traffic also.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 3: Deploy a cluster<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">Node.js event loop is single threaded, though it has additional threads for handling file and network events. This architecture restricts each instance to one logical CPU core.<\/p>\n<p>&nbsp;<\/p>\n<p class=\"western\">So, deploy a cluster of Node.js app servers to maximize usage of multicore systems and also high availability.<\/p>\n<p class=\"western\">There are multiple options for this, such as PM2 and StrongLoop Cluster Management. We usually end up using StrongLoop\u2019s cluster solutions, because many of our applications are built on Loopback API and also it has nice features like options to run as background process (detached), clustered (with options of specifying number of CPU cores), non-profiled, profiled, with Log aggregation and routing options, with ability to send PIDs to file for history tracking.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 4: Setup a load balancer<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">No matter how much you tune a single instance Node.js app server, it can only handle so much traffic. For horizontal scaling, setup a load balancer like HAProxy or Nginx.<\/p>\n<p>&nbsp;<\/p>\n<p class=\"western\">Since <a href=\"http:\/\/strong-pm.io\/\" target=\"_blank\">StrongLoop Process Manager<\/a>\u00a0integrates with Nginx Controller, we always use Nginx as the load balancer.<\/p>\n<p class=\"western\">One thing to consider while load balancing is whether your application is sticky sessions. Nginx pl3us supports sticky sessions. Or you can use tokens and move your session to a shared store like Redis. In general, for high-performance applications, it is not good to have sticky sessions.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 5: Automatic restarts<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">Setup automatic restart of Node.js processes using something like StrongLoop PM or Forever. Also, to make sure things restart on server restart, add it to init.d also.<\/p>\n<p>&nbsp;<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 6: Monitor and collect metrics<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">If you have the budget, use commercial APM solutions like AppDynamics to monitor and collect metrics on your production setup.<\/p>\n<p>&nbsp;<\/p>\n<p class=\"western\">Alternatively, you can hook up StrongLoop PM to Graphite to achieve a degree of this.<\/p>\n<p><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_dock.jpg\" target=\"_blank\"><img class=\"alignnone wp-image-1685 size-full\" style=\"border: 1px solid #ccc;\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_dock.jpg\" alt=\"node-js-tip-dockerize-app\" width=\"638\" height=\"479\" data-wp-pid=\"1685\" \/><\/a><\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 7: Security<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">Node.js has a rich plugin ecosystem. Developers might inadvertently include a plugin that is not secure. Make sure your team maintains a private NPM repository of whitelisted which includes only plugins that go through review process.<\/p>\n<p>&nbsp;<\/p>\n<p class=\"western\">Tools like the\u00a0<a href=\"https:\/\/nodesecurity.io\/\" target=\"_blank\">Node Security Platform<\/a>\u00a0or\u00a0<a href=\"https:\/\/snyk.io\/\" target=\"_blank\">Snyk<\/a>\u00a0can help in this by using exploit databases to find and fix possible security issues in\u00a0your application.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 8: Logging<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">Make sure your application uses an asynchronous performance logger like <a href=\"https:\/\/github.com\/winstonjs\/winston\" target=\"_blank\">Winston<\/a> or <a href=\"https:\/\/github.com\/trentm\/node-bunyan\" target=\"_blank\">Bunyan<\/a>.<\/p>\n<p>&nbsp;<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 9: Automate everything<\/h3>\n<p>&nbsp;<\/p>\n<p class=\"western\">Define your infrastructure as code using something like <a href=\"www.lambda.cd\/\" target=\"_blank\">LambdaCD<\/a> and automate everything including environment specific configuration.<\/p>\n<p class=\"western\">Have any Node.js hacks, tips or tricks to add? Let us know!<\/p>\n<p>&nbsp;<\/p>\n","tags":["Node.js","Node.js Performance","Node.js Tips","Node.Js Tricks"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/node-js-tips-and-tricks\/","license":null,"publishStatus":null,"publishedAt":"2017-03-30T08:34:02+00:00","notifyFollowers":false}
[06-Apr-2017 15:58:51 UTC] Received response (400 - application/json; charset=utf-8): {"errors":[{"message":"No publication ID specified","code":2013}]}
[06-Apr-2017 15:58:51 UTC] API ERROR: No publication ID specified (2013)
[06-Apr-2017 16:00:40 UTC] Making request POST https://api.medium.com/v1/users/15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461/posts: {"title":"9 Production Ready Node.js Tips and Tricks","content":"<h1>9 Production Ready Node.js Tips and Tricks<\/h1>\n<p class=\"western\">How often have you heard \u201cWell, it worked on dev and stage!\u201d when things crash on prod? Hopefully, this post will change all that.<\/p>\n<p>Here are nine tips on deploying scalable Node.js applications into production.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 1: Get your deployment architecture right<\/h3>\n<p>A typical deployment might look like (simplified)<\/p>\n<p><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_arch.jpg\" target=\"_blank\"><img class=\"alignnone wp-image-1684 size-full\" style=\"border: 1px solid #ccc;\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_arch.jpg\" alt=\"node-js-tip-architecture\" width=\"638\" height=\"359\" data-wp-pid=\"1684\" \/><\/a><\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 2:\u00a0Use a reverse proxy<\/h3>\n<p>Don\u2019t expose your Node.js app server directly to incoming HTTP traffic. Always put a reverse proxy in front of it to handle concerns like<\/p>\n<ul>\n<li>SSL termination<\/li>\n<li>Serving static content<\/li>\n<li>Caching slow changing parts of site<\/li>\n<li>Gzip compression and more<\/li>\n<\/ul>\n<p>Popular alternatives are Nginx and Apache. Of late, we have been using Nginx for all our applications with good results. Remember to proxy your web socket traffic also.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 3: Deploy a cluster<\/h3>\n<p>Node.js event loop is single threaded, though it has additional threads for handling file and network events. This architecture restricts each instance to one logical CPU core.<\/p>\n<p>So, deploy a cluster of Node.js app servers to maximize usage of multicore systems and also high availability.<\/p>\n<p class=\"western\">There are multiple options for this, such as PM2 and StrongLoop Cluster Management. We usually end up using StrongLoop\u2019s cluster solutions, because many of our applications are built on Loopback API and also it has nice features like options to run as background process (detached), clustered (with options of specifying number of CPU cores), non-profiled, profiled, with Log aggregation and routing options, with ability to send PIDs to file for history tracking.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 4: Setup a load balancer<\/h3>\n<p>No matter how much you tune a single instance Node.js app server, it can only handle so much traffic. For horizontal scaling, setup a load balancer like HAProxy or Nginx.<\/p>\n<p>Since <a href=\"http:\/\/strong-pm.io\/\" target=\"_blank\">StrongLoop Process Manager<\/a>\u00a0integrates with Nginx Controller, we always use Nginx as the load balancer.<\/p>\n<p class=\"western\">One thing to consider while load balancing is whether your application is sticky sessions. Nginx pl3us supports sticky sessions. Or you can use tokens and move your session to a shared store like Redis. In general, for high-performance applications, it is not good to have sticky sessions.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 5: Automatic restarts<\/h3>\n<p>Setup automatic restart of Node.js processes using something like StrongLoop PM or Forever. Also, to make sure things restart on server restart, add it to init.d also.<\/p>\n<p>Tip 6: Monitor and collect metrics<\/p>\n<p>If you have the budget, use commercial APM solutions like AppDynamics to monitor and collect metrics on your production setup.<\/p>\n<p>Alternatively, you can hook up StrongLoop PM to Graphite to achieve a degree of this.<\/p>\n<p><a href=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_dock.jpg\" target=\"_blank\"><img class=\"alignnone wp-image-1685 size-full\" style=\"border: 1px solid #ccc;\" src=\"http:\/\/www.ideas2it.com\/blog\/wp-content\/uploads\/2017\/03\/node_dock.jpg\" alt=\"node-js-tip-dockerize-app\" width=\"638\" height=\"479\" data-wp-pid=\"1685\" \/><\/a><\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 7: Security<\/h3>\n<p>Node.js has a rich plugin ecosystem. Developers might inadvertently include a plugin that is not secure. Make sure your team maintains a private NPM repository of whitelisted which includes only plugins that go through review process.<\/p>\n<p>Tools like the\u00a0<a href=\"https:\/\/nodesecurity.io\/\" target=\"_blank\">Node Security Platform<\/a>\u00a0or\u00a0<a href=\"https:\/\/snyk.io\/\" target=\"_blank\">Snyk<\/a>\u00a0can help in this by using exploit databases to find and fix possible security issues in\u00a0your application.<\/p>\n<h3 style=\"margin-bottom: 0px;\">Tip 8: Logging<\/h3>\n<p>Make sure your application uses an asynchronous performance logger like <a href=\"https:\/\/github.com\/winstonjs\/winston\" target=\"_blank\">Winston<\/a> or <a href=\"https:\/\/github.com\/trentm\/node-bunyan\" target=\"_blank\">Bunyan<\/a>.<\/p>\n<h3>\u00a0Tip 9: Automate everything<\/h3>\n<p>Define your infrastructure as code using something like <a href=\"www.lambda.cd\/\" target=\"_blank\">LambdaCD<\/a> and automate everything including environment specific configuration.<\/p>\n<p class=\"western\">Have any Node.js hacks, tips or tricks to add? Let us know!<\/p>\n<p>&nbsp;<\/p>\n","tags":["Node.js","Node.js Performance","Node.js Tips","Node.Js Tricks"],"contentFormat":"html","canonicalUrl":"http:\/\/www.ideas2it.com\/blog\/node-js-tips-and-tricks\/","license":"all-rights-reserved","publishStatus":"public","publishedAt":"2017-03-30T08:34:02+00:00","notifyFollowers":true}
[06-Apr-2017 16:00:42 UTC] Received response (201 - application/json; charset=utf-8): {"data":{"id":"94792d37bc2e","title":"9 Production Ready Node.js Tips and Tricks","authorId":"15ea10254112d234d6d000b4978180f3c902712c2fef08b078dfd6462e7cd3461","url":"https://medium.com/@murali_58946/9-production-ready-node-js-tips-and-tricks-94792d37bc2e","canonicalUrl":"http://www.ideas2it.com/blog/node-js-tips-and-tricks/","publishStatus":"public","publishedAt":1490862842000,"license":"all-rights-reserved","licenseUrl":"https://medium.com/policy/9db0094a1e0f","tags":[]}}
